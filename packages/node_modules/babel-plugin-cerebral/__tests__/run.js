/* globals describe it expect  */
import { transform } from 'babel-core'
import { Tag } from 'cerebral/tags'
import plugin from '../index'

const pluginOptions = {
  babelrc: false,
  presets: ['es2015'],
  plugins: [plugin],
}

const createFakeContext = (state) => ({
  controller: {
    getState(path) {
      return path.split('.').reduce((acc, curr) => {
        return acc[curr]
      }, state)
    },
  },
})

describe('Run transformed dot syntax', () => {
  it.only('should evaluate to a tag with nested tags', () => {
    const code = `
      import {state} from 'cerebral';
      state.a[state.b];
    `
    const state = {
      a: {
        c: 'Working!',
      },
      b: 'c',
    }
    const context = createFakeContext(state)
    const { code: result } = transform(code, pluginOptions)
    const tag = eval(result) // eslint-disable-line no-eval
    expect(tag).toMatchSnapshot()
    expect(tag).toBeInstanceOf(Tag)
    expect(tag.getValue(context)).toEqual(state.a.c)
  })

  it('should allow to access with expressions in ${}', () => {
    const code = `
      import {state} from 'cerebral';
      const name = 'c';
      state.a[name][1+1];
    `

    const state = {
      a: {
        c: {
          2: 'Working!',
        },
      },
    }
    const context = createFakeContext(state)

    const { code: result } = transform(code, pluginOptions)
    const tag = eval(result) // eslint-disable-line no-eval
    expect(tag).toBeInstanceOf(Tag)
    expect(tag.getValue(context)).toEqual(state.a.c[2])
  })

  it('should allow namespace imports', () => {
    const code = `
      import App, * as tags from 'cerebral';
      const name = 'c';
      tags.state.a[name][1+1];
    `

    const state = {
      a: {
        c: {
          2: 'Working!',
        },
      },
    }
    const context = createFakeContext(state)

    const { code: result } = transform(code, pluginOptions)
    const tag = eval(result) // eslint-disable-line no-eval
    expect(tag).toBeInstanceOf(Tag)
    expect(tag.getValue(context)).toEqual(state.a.c[2])
  })
})
