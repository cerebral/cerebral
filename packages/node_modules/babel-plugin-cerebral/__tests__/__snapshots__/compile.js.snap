// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Transform dot syntax to template tags should allow access to variables 1`] = `
"
import { state } from 'cerebral';
const a = 'a';
const b = 'b';
state\`a.\${a + b}\`;"
`;

exports[`Transform dot syntax to template tags should allow for string accessors 1`] = `
"
import { state } from 'cerebral';
state\`a.b\`;"
`;

exports[`Transform dot syntax to template tags should allow imported variable to be renamed 1`] = `
"
import { state as anotherName } from 'cerebral';
state => anotherName\`hello.\${anotherName\`world\`}\`;"
`;

exports[`Transform dot syntax to template tags should allow nested usage 1`] = `
"
import { state } from 'cerebral';
state\`hello.\${state\`world\`}\`;"
`;

exports[`Transform dot syntax to template tags should do nothing on default import 1`] = `
"
import state from 'cerebral';
state.hello.world;"
`;

exports[`Transform dot syntax to template tags should do nothing when import is not a tag name 1`] = `
"
import { wrongImport } from 'cerebral';"
`;

exports[`Transform dot syntax to template tags should ignore unbound variable 1`] = `
"
import { state } from 'cerebral';
notState.hello.world;"
`;

exports[`Transform dot syntax to template tags should ignore variable when shadowed 1`] = `
"
import { state } from 'cerebral';
state => state.hello[state.world];"
`;

exports[`Transform dot syntax to template tags should not do anything when cerebral is not imported 1`] = `
"
import { state } from 'other-module';
state.hello.world;"
`;

exports[`Transform dot syntax to template tags should support expression in property accessor 1`] = `
"
import { state } from 'cerebral';
state\`a.\${1 + 1}\`;"
`;

exports[`Transform dot syntax to template tags should support immediate variable accessors 1`] = `
"
import { state } from 'cerebral';
const a = 'hello';
const b = state\`world\`;
state\`\${a}.\${b}.c\`;"
`;

exports[`Transform dot syntax to template tags should track variable assigment 1`] = `
"
import { state } from 'cerebral';
const a = state;
const b = a;
state\`hello.world\`;"
`;

exports[`Transform dot syntax to template tags should transforms simple state dot syntax 1`] = `
"
import { state } from 'cerebral';
state\`hello.world\`;"
`;

exports[`Transform imports containing ".proxy" should allow renaming of imports 1`] = `
"
import { state as fooBar } from 'app.cerebral.proxy.ts';
fooBar\`world\`;"
`;

exports[`Transform imports containing ".proxy" should not complain about other imports 1`] = `
"
import { state, foo, bar } from 'app.cerebral.proxy.ts';"
`;

exports[`Transform imports containing ".proxy" should rewrite tags but not import 1`] = `
"
import { state } from 'app.cerebral.proxy.ts';
state\`world\`;"
`;

exports[`Transform namespaced imports should allow assigning tags to variables 1`] = `
"
import * as proxies from 'cerebral';
const bar = proxies.state;"
`;

exports[`Transform namespaced imports should allow for default import 1`] = `
"
import App, * as proxies from 'cerebral';
proxies.state\`hello.world\`;"
`;

exports[`Transform namespaced imports should do nothing on wrong tag name 1`] = `
"
import * as proxies from 'cerebral';
proxies.foo\`bar\`;"
`;

exports[`Transform namespaced imports should keep track of bound variables 1`] = `
"
import * as proxies from 'cerebral';
const bar = proxies;
proxies => proxies.state.hello.world;
proxies => bar.state\`hello.world\`;"
`;

exports[`Transform namespaced imports should keept track of assigned tags 1`] = `
"
import * as proxies from 'cerebral';
const bar = proxies.state;
bar\`hello.world\`;"
`;

exports[`Transform namespaced imports should transform simple state dot syntax 1`] = `
"
import * as proxies from 'cerebral';
proxies.state\`hello.world\`;"
`;
