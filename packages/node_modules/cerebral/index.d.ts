import { DevTools } from "./devtools"
import { FunctionTree } from 'function-tree'

interface ControllerOptions {
  state?: any
  signals?: any
  providers?: any[]
  modules?: any
  devtools?: DevTools
  options?: any
}

declare class ControllerClass extends FunctionTree {
  constructor(config?: ControllerOptions)
  flush(force: boolean): void
  updateComponents(changes: any[], force: boolean): void
  getModel(): any
  getState(): any
  runSignal(name: string, signal: any[], payload: any): void
  getSignal(path: string): Function
  addModule(path: string, module: any): void
  removeModule(path: string): void
}

export function Controller(config?: ControllerOptions): ControllerClass

declare class ComputeClass {
  constructor(...args: any[])
  getValue(getters: any): any
}

export function compute(...args: any[]): ComputeClass
export function provide(name: string, provider: any): Function

export { sequence, parallel } from 'function-tree'
