import { DevTools } from "./devtools"
import { Context, FunctionTree, Payload, Provider, Resolve, ResolveValue, FunctionTreeExecutable} from 'function-tree'

export interface StateModel {
  concat(path: string, arr: any[]): void
  increment(path: string, amount?: number): void
  get<T=any>(path?: string): T | undefined
  merge(path: string, {}): void
  pop(path: string): void
  push(path: string, value: any): void
  set(path: string, value: any): void
  shift(path: string): void
  splice(path: string, ...args: number[]): void
  toggle(path: string): void
  unset(path: string): void
  unshift(path: string, value: any): void
}

export interface ActionContextBase {
  controller: ControllerClass
  debugger: any
  state: StateModel
}

export type ActionContext<C = { props: any }> = Context<C> & ActionContextBase

export interface Action<C=any,T=void> extends FunctionTreeExecutable {
  (context: ActionContext<C>): T
}

export type ActionFactory<T={}> = (...args: any[]) => Action<T>

interface Paths extends FunctionTreeExecutable {
  [path: string]: Chain
}

export type Chain = FunctionTreeExecutable | FunctionTreeExecutable
export type SignalChain = Chain
export type ActionChain = Chain

type SignalsMap = { 
  [signalName: string]: SignalChain
}

interface ErrorClass {
  new(...args: any[]): any 
}

interface ModuleObject {
  state?: any
  signals?: SignalsMap
  modules?: {
    [submodule: string]: ModuleClass
  }
  catch?: [ ErrorClass, SignalChain ][]
  providers?: {
    [providerName: string]: any
  }
}

type ModuleFunction = (module: {name: string, path: string, controller: ControllerClass}) => ModuleObject

export type ModuleDefinition = ModuleObject | ModuleFunction

export interface ModuleClass {
  // not public API
  create(controller: ControllerClass, path: string): void
}

export function Module(moduleDefinition: ModuleDefinition): ModuleClass

export type Signal<T=any> = (props?: T) => void

export interface ControllerOptions {
  devtools?: DevTools
  // Model
  throwToConsole?: boolean
}

export interface ControllerClass extends FunctionTree {
  constructor(config?: ControllerOptions): void
  flush(force: boolean): void
  updateComponents(changes: any[], force: boolean): void
  getModel(): StateModel
  getState(path?: string): any
  runSignal(name: string, signal: SignalChain, payload: any): void
  getSignal<T=any>(path: string): Signal<T>
  // Not sure this is used anymore
  addModule(path: string, module: ModuleClass): void
  // Not sure this is used anymore
  removeModule(path: string): void
}

export function Controller(rootModule: ModuleClass, config?: ControllerOptions): ControllerClass

export type ValueResolver = <T=any>(tag: ResolveValue<T>) => T

export class Computed<T=any> implements FunctionTreeExecutable {
  constructor(...args: (any|ValueResolver)[])
  getValue(getters: any): T
}

export function Compute<A,T>(
  arg1: ResolveValue<A>,
  fn: (arg1: A, get: ValueResolver) => T
): Computed<T>
export function Compute<A,B,T>(
  arg1: ResolveValue<A>,
  arg2: ResolveValue<B>,
  fn: (arg1: A, arg2: B, get: ValueResolver) => T
): Computed<T>
export function Compute<A,B,C,T>(
  arg1: ResolveValue<A>,
  arg2: ResolveValue<B>,
  arg3: ResolveValue<C>,
  fn: (arg1: A, arg2: B, arg3: C, get: ValueResolver) => T
): Computed<T>

export function Compute<A,B,T>(value1: ResolveValue<A> | A, value2: ResolveValue<B> | B, fn: ( value1: A, value2: B ) => T ): Computed<T>
export function Compute<A,T>(value1: ResolveValue<A> | A, fn: ( value1: A ) => T ): Computed<T>
export function Compute<T=any>(...args: any[]): Computed<T>
export function provide(name: string, provider: any): Provider

export { sequence, parallel } from 'function-tree'

export class View {
    constructor(config:any)
}
