import { DevTools } from './devtools'
import {
  IContext as IFunctionTreeContext,
  FunctionTree,
  Provider as FunctionTreeProvider,
  ResolveValue,
  TFunctionTreeExecutable,
  Primitive,
} from 'function-tree'

export { sequence, parallel } from 'function-tree'
export type Sequence = TFunctionTreeExecutable
export {
  IBranchContext,
  SequenceFactory as ChainSequenceFactory,
  SequenceWithPropsFactory as ChainSequenceWithPropsFactory,
} from 'function-tree/fluent'

/*
  State
*/
export interface StateModel {
  concat(path: any, arr: any[]): void
  increment(path: any, amount?: number): void
  get<T = any>(any?: any): T | undefined
  merge(path: any, {}): void
  pop(path: any): void
  push(path: any, value: any): void
  set(path: any, value: any): void
  shift(path: any): void
  splice(path: any, ...args: number[]): void
  toggle(path: any): void
  unset(path: any): void
  unshift(path: any, value: any): void
}

export interface Operators {
  concat<T>(path: T, arr: T): void
  increment(path: any, amount?: number): void
  merge<T>(path: T, obj: Partial<T>): void
  pop(path: any[]): void
  push<T>(path: T, value: any): void
  set<T>(path: T, value: T): void
  shift<T>(path: any[]): void
  splice<T>(path: any[], ...args: number[]): void
  toggle(path: boolean): void
  unset(path: any): void
  unshift<T>(path: T, value: any): void
}

export interface IContext<TProps> extends IFunctionTreeContext<TProps> {
  operators: Operators
  get: <T>(tag: T) => T
}

/*
  Module
*/
interface ErrorClass {
  new (...args: any[]): any
}

export type SequencesMap = {
  [sequenceName: string]: Sequence
}

export interface ModuleObjectDefinition<State, Sequences, Computed> {
  state?: State
  sequences?: Sequences
  computed?: Computed
  reactions?: {
    [submodule: string]: void
  }
  modules?: {
    [submodule: string]: ModuleClass
  }
  catch?: [ErrorClass, Sequence][]
  providers?: {
    [providerName: string]: any
  }
}

export interface InstantiatedModuleObjectDefinition {
  state?: any
  sequences?: any
  reactions?: {
    [submodule: string]: void
  }
  modules?: {
    [submodule: string]: InstantiatedModuleObjectDefinition
  }
  computed?: {
    [computed: string]: any
  }
  catch?: [ErrorClass, Sequence][]
  providers?: {
    [providerName: string]: any
  }
}

type ModuleFunction<State, Sequences, Computed> = (
  module: { name: string; path: string; controller: ControllerClass }
) => ModuleObjectDefinition<State, Sequences, Computed>

export type ModuleDefinition<State, Sequences, Computed> =
  | ModuleObjectDefinition<State, Sequences, Computed>
  | ModuleFunction<State, Sequences, Computed>

export class ModuleClass {
  // not public API
  create(
    controller: BaseControllerClass,
    path: string[]
  ): InstantiatedModuleObjectDefinition
}

export function Module<State = {}, Sequences = {}, Computed = {}>(
  moduleDefinition: ModuleDefinition<State, Sequences, Computed>
): ModuleClass

/*
  Connect
*/
export type RunableSequence<T = any> = (props?: T) => void

/*
  Controller
*/
export interface ControllerOptions {
  devtools?: DevTools
  throwToConsole?: boolean
  Model?: any
}

export interface BaseControllerClass extends FunctionTree {
  getModel(): StateModel
  getState(path?: string): any
  runSignal(name: string, signal: Sequence, payload: any): void
  getSignal<T = any>(path: string): RunableSequence<T>
  addModule(path: string, module: ModuleClass): void
  removeModule(path: string): void
}

export class BaseControllerClass {
  model: any
  module: InstantiatedModuleObjectDefinition
  constructor(
    rootModule: ModuleClass,
    options: ControllerOptions,
    functionTreeOptions: any
  )
}

interface ControllerClass extends BaseControllerClass {
  constructor(config?: ControllerOptions): void
  flush(force: boolean): void
  updateComponents(changes: any[], force: boolean): void
}

export function Controller(
  rootModule: ModuleClass,
  config?: ControllerOptions
): ControllerClass

export default function App(
  rootModule: ModuleClass,
  config?: ControllerOptions
): ControllerClass

type ControllerSequence = string | Primitive | Array<Function | Primitive>
export interface UniversalControllerClass extends ControllerClass {
  setState(path: string, value: any): void
  getChanges(): { [path: string]: any }
  getScript(): string
  runSequence(sequence: ControllerSequence, payload: any): Promise<any>
}

export function UniversalController(
  rootModule: ModuleClass,
  config?: ControllerOptions
): UniversalControllerClass

export function UniversalApp(
  rootModule: ModuleClass,
  config?: ControllerOptions
): UniversalControllerClass

/*
  Computed
*/
export type ValueResolver = <T = any>(tag: ResolveValue<T>) => T

export class ComputedInstance<T = any> {
  constructor(...args: (any | ValueResolver)[])
  getValue(getters: any): T
}

export type ComputedGetter = <T>(arg: T) => T

export interface ComputedDependencies {
  get: ComputedGetter
}

export function Computed<K>(cb: (dependencies: ComputedDependencies) => K): K

export function Computed<T, K>(
  dependencies: T,
  cb: (dependencies: T & ComputedDependencies) => K
): K

export function Reaction<T, K>(
  dependencies: T,
  cb: (dependencies: T & ComputedDependencies) => void
): void

export function Provider(provider: any, options?: any): FunctionTreeProvider

export class View {
  constructor(config: any)
}

export class CerebralError {
  constructor(message: string, details?: any)
  name: string
  details: any
  toJSON: () => any
}
