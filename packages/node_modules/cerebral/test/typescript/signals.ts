import { state, props } from './../../tags'
import { set, when } from './../../operators'
import { compute } from '../../index'
import { ActionContext, SignalChain, Chain, Compute, Action, ActionFactory, ValueResolver } from '../../index'

const createReadyProp: ActionFactory = (ready: boolean) => () => ({ready})

const setReadyState: Action = ({state, props}: ActionContext) => {
    state.set('app.ready', props.ready)
    
    state.toggle('some.path')
    state.unset('some.path')
    state.merge('some.path', {
      some: 'value'
    })
    state.push('some.path', 'someValue')
    state.unshift('some.path', 'someValue')
    state.pop('some.path')
    state.shift('some.path')
    state.concat('some.path', ['someValueA', 'someValueB'])
    state.splice('some.path', 2, 1)
}

const computeName: Compute = compute(
    state`app.ready`,
    (ready: boolean, get: ValueResolver) => ({
        name: get(state`app.name`) + (ready ? ' is ready' : '')
    })
)

export const appReadySignal: SignalChain = [
    createReadyProp(true),
    setReadyState,
    computeName,
    when(props`name`), {
        true: [set(state`app.name`, props`name`)],
        false: [] as Chain
    }
]