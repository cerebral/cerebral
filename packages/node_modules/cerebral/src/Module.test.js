/* eslint-env mocha */
import { sequence, Controller, Module, ModuleClass, CerebralError } from './'
import assert from 'assert'

describe('Module', () => {
  it('should instantiate with initial state', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
    })
    const controller = new Controller(rootModule)

    assert.deepEqual(controller.getState(), { foo: 'bar' })
    assert.ok(rootModule instanceof ModuleClass)
  })
  it('should instantiate with signals', () => {
    const rootModule = Module({
      signals: {
        bar: [],
      },
    })
    const controller = new Controller(rootModule)

    assert.ok(controller.getSignal('bar'))
  })
  it('should instantiate with signals defined as sequence', () => {
    const rootModule = Module({
      signals: {
        bar: sequence('bar', []),
      },
    })
    const controller = new Controller(rootModule)

    assert.ok(controller.getSignal('bar'))
  })
  it('should run signals with providers', () => {
    const rootModule = Module({
      modules: {
        foo: Module({
          signals: {
            signalA: [
              context => {
                assert.equal(context.foo, 'foo')
                assert.equal(context.bar, 'bar')
              },
            ],
          },
          providers: {
            foo: 'foo',
          },
        }),
        bar: Module({
          signals: {
            signalB: [
              context => {
                assert.equal(context.bar, 'bar')
                assert.equal(context.foo, 'foo')
              },
            ],
          },
          providers: {
            bar: 'bar',
          },
        }),
      },
    })
    const controller = new Controller(rootModule)

    controller.getSignal('foo.signalA')()
    controller.getSignal('bar.signalB')()
  })
  it('should be able to define signals with signal property', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        test: ({ state }) => state.set('foo', 'bar2'),
      },
    })
    const controller = new Controller(rootModule)

    controller.getSignal('test')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should be able to define module with catch property and custom errors', () => {
    const catchError = ({ props, state }) =>
      state.set('foo', props.error.message)
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        test: () => {
          throw new Error('bar2')
        },
      },
      catch: [[Error, catchError]],
    })
    const controller = new Controller(rootModule)

    controller.getSignal('test')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should be able to define module with catch property using CerebralError', () => {
    const catchError = ({ props, state }) =>
      state.set('foo', props.error.message)
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        test: () => {
          throw new CerebralError('bar2')
        },
      },
      catch: [[CerebralError, catchError]],
    })
    const controller = new Controller(rootModule)

    controller.getSignal('test')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should throw when no matching custom catch type', () => {
    class TestError {}
    const catchError = ({ props, state }) =>
      state.set('foo', props.error.message)
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        test: [
          () => {
            throw new TestError('bar2')
          },
        ],
      },
      catch: [[Error, catchError]],
    })
    const controller = new Controller(rootModule)

    assert.throws(() => {
      controller.getSignal('test')()
    })
    assert.deepEqual(controller.getState(), { foo: 'bar' })
  })
  it('should throw when signal is not set properly', () => {
    assert.throws(() => {
      Controller(
        Module({
          signals: {
            test: undefined,
          },
        })
      )
    })
  })
})
