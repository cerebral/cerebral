/* eslint-env mocha */
import App, { CerebralError, ModuleClass, state } from './'

import Module from './Module'
import assert from 'assert'
import { sequence } from './factories'

describe('Module', () => {
  it('should instantiate with initial state', () => {
    const rootModule = new Module({
      state: {
        foo: 'bar',
      },
    })
    const controller = App(rootModule)

    assert.deepEqual(controller.getState(), { foo: 'bar' })
    assert.ok(rootModule instanceof ModuleClass)
  })
  it('should instantiate with sequences', () => {
    const rootModule = new Module({
      sequences: {
        bar: [],
      },
    })
    const controller = App(rootModule)

    assert.ok(controller.getSequence('bar'))
  })
  it('should instantiate with sequences defined as sequence', () => {
    const rootModule = new Module({
      sequences: {
        bar: sequence('bar', []),
      },
    })
    const controller = App(rootModule)

    assert.ok(controller.getSequence('bar'))
  })
  it('should run sequences with providers', () => {
    const rootModule = new Module({
      modules: {
        foo: new Module({
          sequences: {
            sequenceA: [
              (context) => {
                assert.equal(context.foo.get(), 'foo')
                assert.equal(context.bar.get(), 'bar')
              },
            ],
          },
          providers: {
            foo: {
              get() {
                return 'foo'
              },
            },
          },
        }),
        bar: new Module({
          sequences: {
            sequenceB: [
              (context) => {
                assert.equal(context.bar.get(), 'bar')
                assert.equal(context.foo.get(), 'foo')
              },
            ],
          },
          providers: {
            bar: {
              get() {
                return 'bar'
              },
            },
          },
        }),
      },
    })
    const controller = App(rootModule)

    controller.getSequence('foo.sequenceA')()
    controller.getSequence('bar.sequenceB')()
  })
  it('should be able to define sequences with sequence property', () => {
    const rootModule = new Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        test: ({ store }) => store.set(state`foo`, 'bar2'),
      },
    })
    const controller = App(rootModule)

    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should be able to define module with catch property and custom errors', () => {
    const catchError = ({ props, store }) =>
      store.set(state`foo`, props.error.message)
    const rootModule = new Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        test: () => {
          throw new Error('bar2')
        },
      },
      catch: [[Error, catchError]],
    })
    const controller = App(rootModule, { throwToConsole: false })

    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should be able to define module with catch property using CerebralError', () => {
    const catchError = ({ props, store }) =>
      store.set(state`foo`, props.error.message)
    const rootModule = new Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        test: () => {
          throw new CerebralError('bar2')
        },
      },
      catch: [[CerebralError, catchError]],
    })
    const controller = App(rootModule, { throwToConsole: false })

    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should throw when no matching custom catch type', () => {
    class TestError {}
    const catchError = ({ props, store }) =>
      store.set(state`foo`, props.error.message)
    const rootModule = new Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [
          () => {
            throw new TestError('bar2')
          },
        ],
      },
      catch: [[Error, catchError]],
    })
    const controller = App(rootModule)

    assert.throws(() => {
      controller.getSequence('test')()
    })
    assert.deepEqual(controller.getState(), { foo: 'bar' })
  })
  it('should throw when sequence is not set properly', () => {
    assert.throws(() => {
      App(
        new Module({
          sequences: {
            test: undefined,
          },
        })
      )
    })
  })
})
