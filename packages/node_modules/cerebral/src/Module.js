import { throwError } from './utils'

class Module {
  constructor(controller, path, moduleDescription) {
    const stringPath = path.join('.')
    const moduleStub = {
      controller,
      path: stringPath,
      name: path.slice().pop(),
    }

    const module = typeof moduleDescription === 'function'
      ? moduleDescription(moduleStub)
      : moduleDescription

    /* Convert arrays to actually runable signals */
    module.signals = Object.keys(
      module.signals || {}
    ).reduce((currentSignals, signalKey) => {
      const signal = module.signals[signalKey]
      if (!signal) {
        throwError(
          `Signal with name "${signalKey}" is undefined. Please check that the signal is set to either an array or a function.`
        )
      }
      currentSignals[signalKey] = {
        signal: signal.signal || signal,
        catch: signal.catch || controller.catch
          ? new Map(
              []
                .concat(controller.catch ? [...controller.catch] : [])
                .concat(signal.catch ? [...signal.catch] : [])
            )
          : null,
        run(payload) {
          controller.runSignal(
            path.concat(signalKey).join('.'),
            signal.signal || signal,
            payload
          )
        },
      }

      return currentSignals
    }, {})

    /* Instantiate submodules */
    module.modules = Object.keys(
      module.modules || {}
    ).reduce((registered, moduleKey) => {
      registered[moduleKey] = new Module(
        controller,
        path.concat(moduleKey),
        module.modules[moduleKey]
      )
      return registered
    }, {})

    return module
  }
}

export default Module
