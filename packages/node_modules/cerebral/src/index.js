import ControllerClass from './Controller'
import UniversalControllerClass from './UniversalController'
import ModuleClass from './Module'
import { DEPRECATE } from './utils'

// Needed to test for instanceof.
export { default as ModuleClass } from './Module'
export { default as ControllerClass } from './Controller'
export { default as ProviderClass } from './Provider'
export { default as BaseControllerClass } from './BaseController'

export {
  SequenceFactory as ChainSequenceFactory,
  SequenceWithPropsFactory as ChainSequenceWithPropsFactory,
} from 'function-tree/fluent'

export function Controller(rootModule, options) {
  DEPRECATE('Controller', 'Use App default import instead')
  return new ControllerClass(rootModule, options)
}

export function UniversalController(rootModule, options) {
  DEPRECATE('UniversalController', 'Use UniversalApp import instead')
  return new UniversalControllerClass(rootModule, options)
}

export function UniversalApp(rootModule, options) {
  return new UniversalControllerClass(rootModule, options)
}

export function Module(definition) {
  DEPRECATE(
    'Module',
    'Use plain object/function. Type with ModuleDefinition export'
  )
  return new ModuleClass(definition)
}

export { default as CerebralError } from './CerebralError'
export { default as Provider } from './Provider'
export { default as Computed } from './Computed'
export { default as Reaction } from './Reaction'

export { default as View } from './View'
export { createDummyController, throwError } from './utils'

export * from './tags'

export default function App(rootModule, options) {
  return new ControllerClass(rootModule, options)
}
