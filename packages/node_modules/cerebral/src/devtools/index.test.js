/* eslint-env mocha */
'use strict'

import { WebSocket, Server } from 'mock-socket'
import { Devtools } from './'
import { Controller } from '../'

Devtools.prototype.createSocket = function() {
  this.ws = new WebSocket(`ws://${this.host}`)
}

describe('Devtools', () => {
  it('should not throw after state.get()', done => {
    const mockServer = new Server('ws://localhost:8585')
    let messages = {}
    let messageTypes = []
    mockServer.on('connection', server => {
      server.on('message', event => {
        const message = JSON.parse(event)
        switch (message.type) {
          case 'pong':
            server.send(JSON.stringify({ type: 'ping' }))
            break
          case 'ping':
            server.send(JSON.stringify({ type: 'pong' }))
            break
          case 'init':
            break
          case 'execution':
            messageTypes.push(message.type)
            if (Array.isArray(messages[message.type])) {
              messages[message.type].push(message)
            } else {
              messages[message.type] = [message]
            }
            break
          default:
            messageTypes.push(message.type)
            messages[message.type] = message
            break
        }
      })
    })

    const controller = Controller({
      devtools: new Devtools({
        host: 'localhost:8585',
      }),
      state: {},
    })

    setTimeout(() => {
      controller
        .run(
          'fooSignal',
          [
            function fooAction({ state }) {
              state.set('app.bar', {
                baz: false,
              })
              state.get()
              state.set('app.bar.baz', true)
            },
          ],
          {}
        )
        .then(() => {
          mockServer.stop(done)
        })
        .catch(error => {
          done(error)
        })
    }, 250)
  })
})
