/* eslint-env mocha */
import { Controller, Module } from '../'
import { state, moduleState } from '../tags'
import assert from 'assert'

describe('Operators', () => {
  it('should be able to SET state', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        foo: [({ operators }) => operators.set(state`foo`, 'bar2')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should work whith module tag', () => {
    const rootModule = Module({
      state: {
        foo: ['foo'],
      },
      signals: {
        foo: [({ operators }) => operators.concat(moduleState`foo`, ['bar'])],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['foo', 'bar'] })
  })
  it('should be able to SET state with an array in the path', () => {
    const rootModule = Module({
      state: { foo: ['bar'] },
      signals: {
        foo: [({ operators }) => operators.set(state`foo.0`, 'baz')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['baz'] })
  })
  it('should be able to TOGGLE state', () => {
    const rootModule = Module({
      state: { foo: false },
      signals: {
        foo: [({ operators }) => operators.toggle(state`foo`)],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: true })
  })
  it('should be able to PUSH state', () => {
    const rootModule = Module({
      state: {
        foo: ['foo'],
      },
      signals: {
        foo: [({ operators }) => operators.push(state`foo`, 'bar')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['foo', 'bar'] })
  })
  it('should be able to MERGE state', () => {
    const rootModule = Module({
      state: {
        foo: { foo: 'bar' },
      },
      signals: {
        foo: [({ operators }) => operators.merge(state`foo`, { foo2: 'bar2' })],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), {
      foo: { foo: 'bar', foo2: 'bar2' },
    })
  })
  it('should be able to POP state', () => {
    const rootModule = Module({
      state: {
        foo: ['foo', 'bar'],
      },
      signals: {
        foo: [({ operators }) => operators.pop(state`foo`)],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['foo'] })
  })
  it('should be able to SHIFT state', () => {
    const rootModule = Module({
      state: {
        foo: ['foo', 'bar'],
      },
      signals: {
        foo: [({ operators }) => operators.shift(state`foo`)],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['bar'] })
  })
  it('should be able to UNSHIFT state', () => {
    const rootModule = Module({
      state: {
        foo: ['foo'],
      },
      signals: {
        foo: [({ operators }) => operators.unshift(state`foo`, 'bar')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['bar', 'foo'] })
  })
  it('should be able to SPLICE state', () => {
    const rootModule = Module({
      state: {
        foo: ['foo'],
      },
      signals: {
        foo: [({ operators }) => operators.splice(state`foo`, 0, 1, 'bar')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['bar'] })
  })
  it('should be able to UNSET state', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        foo: [({ operators }) => operators.unset(state`foo`)],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), {})
  })
  it('should be able to CONCAT state', () => {
    const rootModule = Module({
      state: {
        foo: ['foo'],
      },
      signals: {
        foo: [({ operators }) => operators.concat(state`foo`, ['bar'])],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['foo', 'bar'] })
  })
  it('should provide a descriptive error when passing invalid value to state', () => {
    const rootModule = Module({
      state: {
        foo: '',
      },
      signals: {
        foo: [({ operators }) => operators.set(state`foo`, () => {})],
      },
    })
    const controller = Controller(rootModule, {
      devtools: { init() {}, sendExecutionData() {} },
    })
    assert.throws(() => {
      controller.getSignal('foo')()
    }, Error)
  })
  it('should work with devtools', () => {
    const rootModule = Module({
      state: {
        foo: ['foo'],
      },
      signals: {
        foo: [({ operators }) => operators.splice(state`foo`, 0, 1, 'bar')],
      },
    })
    const controller = Controller(rootModule, {
      devtools: { init() {}, send() {}, sendExecutionData() {} },
    })
    controller.getSignal('foo')()
    assert.deepEqual(controller.getState(), { foo: ['bar'] })
  })
})
