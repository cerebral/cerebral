function DebuggerProviderFactory() {
  function DebuggerProvider(context, functionDetails, payload, prevPayload) {
    const devtools = context.controller.devtools
    if (devtools.preventPropsReplacement) {
      Object.keys(payload).forEach(key => {
        if (
          prevPayload &&
          key in prevPayload &&
          prevPayload[key] !== payload[key]
        ) {
          throw new Error(
            `Cerebral Devtools - You have activated the "preventPropsReplacement" option and in signal "${context
              .execution
              .name}", before the action "${functionDetails.name}", the key "${key}" was replaced`
          )
        }
      })
    }

    context.debugger = {
      send(debuggerData) {
        devtools.sendExecutionData(
          debuggerData,
          context,
          functionDetails,
          payload
        )
      },
      wrapProvider(providerKey) {
        const provider = context[providerKey]

        context[providerKey] = Object.keys(
          provider
        ).reduce(
          (wrappedProvider, key) => {
            const originalFunc = provider[key]

            wrappedProvider[key] = (...args) => {
              context.debugger.send({
                method: `${providerKey}.${key}`,
                args: args,
              })

              return originalFunc.apply(provider, args)
            }
            wrappedProvider[key].direct = originalFunc.bind(provider)

            return wrappedProvider
          },
          typeof provider === 'function'
            ? (...args) => {
                context.debugger.send({
                  method: `${providerKey}`,
                  args: args,
                })

                return provider.apply(provider, args)
              }
            : {}
        )
      },
    }

    return context
  }

  return DebuggerProvider
}

export default DebuggerProviderFactory
