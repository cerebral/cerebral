/* eslint-env mocha */
import { Controller, Module, Computed } from '../'
import { state, module, props, computed, signal } from '../tags'
import assert from 'assert'

describe('GET', () => {
  it('should be able to GET state', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        foo: [({ get }) => assert.deepEqual(get(state`foo`), 'bar')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
  })
  it('should be able to GET module state', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      signals: {
        foo: [({ get }) => assert.deepEqual(get(module`foo`), 'bar')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
  })
  it('should be able to GET props', () => {
    const rootModule = Module({
      signals: {
        foo: [({ get }) => assert.deepEqual(get(props`foo`), 'bar')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')({
      foo: 'bar',
    })
  })
  it('should be able to GET computed', () => {
    const fooComputed = Computed()(() => 'bar')
    const rootModule = Module({
      computeds: {
        fooComputed,
      },
      signals: {
        foo: [({ get }) => assert.deepEqual(get(computed`fooComputed`), 'bar')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
  })
  it('should be able to GET signal', () => {
    const rootModule = Module({
      signals: {
        foo: [({ get }) => assert.ok(get(signal`foo`))],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('foo')()
  })
})
