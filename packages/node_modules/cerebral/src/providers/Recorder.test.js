/* eslint-env mocha */
import App, { state } from '../'

import assert from 'assert'

const timeoutMock = () => {
  function timeout(callback, time) {
    timeout.callbacks.push({
      callback,
      time,
    })
  }
  timeout.callbacks = []
  timeout.tick = () => {
    const firstTimeout = timeout.callbacks.shift()
    firstTimeout.callback()

    return firstTimeout.time
  }
  return timeout
}

describe('Recorder', () => {
  it('should record mutations', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        record: [({ recorder }) => recorder.record()],
        update: [({ store }) => store.set(state`foo`, 'bar2')],
        stop: [({ recorder }) => recorder.stop()],
        verify: [
          ({ recorder }) => {
            const recording = recorder.getRecording()
            assert.ok(recording.end)
            assert.ok(recording.start)
            assert.deepEqual(recording.initialState[0].path, [])
            assert.equal(
              recording.initialState[0].value,
              JSON.stringify({
                foo: 'bar',
              })
            )
            assert.equal(recording.events.length, 3)
          },
        ],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    controller.getSequence('record')()
    controller.getSequence('update')()
    controller.getSequence('stop')()
    controller.getSequence('verify')()
  })
  it('should replay mutations', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const now = Date.now()
    const recording = {
      start: now,
      end: now + 20,
      duration: 20,
      initialState: [
        {
          path: [],
          value: JSON.stringify({ foo: 'bar2' }),
        },
      ],
      events: [
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar3']),
          timestamp: now + 10,
        },
      ],
    }
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        play: [
          ({ recorder }) => {
            recorder.loadRecording(recording)
            recorder.play({
              allowedsequences: ['stop'],
            })
          },
        ],
        stop: [({ recorder }) => recorder.stop()],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    controller.getSequence('play')()
    assert.deepEqual(controller.getState(), {
      foo: 'bar2',
    })
    timeout.tick()
    assert.deepEqual(controller.getState(), {
      foo: 'bar3',
    })
    controller.getSequence('stop')()
  })
  it('should allow option to extract specific paths as starting point', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        record: [
          ({ recorder }) =>
            recorder.record({
              initialState: ['foo'],
            }),
        ],
        update: [({ store }) => store.set(state`foo`, 'bar2')],
        stop: [({ recorder }) => recorder.stop()],
        play: [
          ({ recorder }) =>
            recorder.play({
              allowedsequences: ['stop'],
            }),
        ],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    controller.getSequence('record')()
    controller.getSequence('update')()
    controller.getSequence('stop')()
    controller.getSequence('update')()
    controller.getSequence('play')()
    assert.deepEqual(controller.getState(), { foo: 'bar' })
    controller.getSequence('stop')()
  })
  it('should prevent further sequence execution', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        record: [
          ({ recorder }) =>
            recorder.record({
              initialState: ['foo'],
            }),
        ],
        update: [({ store }) => store.set(state`foo`, 'bar2')],
        update2: [({ store }) => store.set(state`foo`, 'bar3')],
        stop: [({ recorder }) => recorder.stop()],
        play: [
          ({ recorder }) =>
            recorder.play({
              allowedsequences: ['stop'],
            }),
        ],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    controller.getSequence('record')()
    controller.getSequence('update')()
    controller.getSequence('stop')()
    controller.getSequence('play')()
    timeout.tick() // flush
    timeout.tick()
    controller.getSequence('update2')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    controller.getSequence('stop')()
  })
  it('should emit flush event when playing back, on subsequente changes and as last event', (done) => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        record: [
          ({ recorder }) =>
            recorder.record({
              initialState: ['foo'],
            }),
        ],
        update: [({ store }) => store.set(state`foo`, 'bar2')],
        stop: [({ recorder }) => recorder.stop()],
        play: [
          ({ recorder }) =>
            recorder.play({
              allowedsequences: ['stop'],
            }),
        ],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    controller.getSequence('record')()
    controller.getSequence('update')()
    controller.getSequence('stop')()
    controller.once('flush', (changes) => {
      assert.deepEqual(changes, [
        {
          path: ['foo'],
          forceChildPathUpdates: true,
        },
      ])
    })
    controller.getSequence('play')()
    timeout.tick()
    controller.once('flush', (changes) => {
      assert.deepEqual(changes, [
        {
          path: ['foo'],
          forceChildPathUpdates: true,
        },
      ])
      controller.getSequence('stop')()
      done()
    })
  })
  it('should be able to pause and continue playback', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const now = Date.now()
    const recording = {
      start: now,
      end: now + 25,
      duration: 25,
      initialState: [{ path: [], value: JSON.stringify({ foo: 'bar' }) }],
      events: [
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar2']),
          timestamp: now + 10,
        },
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar3']),
          timestamp: now + 20,
        },
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar4']),
          timestamp: now + 25,
        },
      ],
    }
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        play: [
          ({ recorder }) => {
            recorder.loadRecording(recording)
            recorder.play({
              allowedsequences: ['stop', 'pause'],
            })
          },
        ],
        pause: [({ recorder }) => recorder.pause()],
        stop: [({ recorder }) => recorder.stop()],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    controller.getSequence('play')()
    assert.equal(timeout.tick(), 10)
    assert.deepEqual(controller.getState(), {
      foo: 'bar2',
    })
    assert.equal(timeout.tick(), 10)
    assert.deepEqual(controller.getState(), {
      foo: 'bar3',
    })
    controller.getSequence('pause')()
    controller.getSequence('play')()
    assert.equal(timeout.tick(), 5)
    assert.deepEqual(controller.getState(), {
      foo: 'bar4',
    })
    controller.getSequence('stop')()
  })
  it('should be able to seek', () => {
    const RecorderProvider = require('./Recorder').default
    const now = Date.now()
    const recording = {
      start: now,
      end: now + 25,
      duration: 25,
      initialState: [{ path: [], value: JSON.stringify({ foo: 'bar' }) }],
      events: [
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar2']),
          timestamp: now + 10,
        },
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar3']),
          timestamp: now + 20,
        },
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar4']),
          timestamp: now + 25,
        },
      ],
    }
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        load: [
          ({ recorder }) => {
            recorder.loadRecording(recording)
          },
        ],
        seek: [({ recorder }) => recorder.seek(21)],
        stop: [({ recorder }) => recorder.stop()],
      },
      providers: { recorder: RecorderProvider() },
    }
    const controller = App(rootModule)
    controller.getSequence('load')()
    controller.getSequence('seek')()
    assert.deepEqual(controller.getState(), {
      foo: 'bar3',
    })
    controller.getSequence('stop')()
  })
  it('should emit events', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        record: [
          ({ recorder }) =>
            recorder.record({
              initialState: ['foo'],
            }),
        ],
        update: [({ store }) => store.set(state`foo`, 'bar2')],
        update2: [({ store }) => store.set(state`foo`, 'bar3')],
        stop: [({ recorder }) => recorder.stop()],
        play: [
          ({ recorder }) =>
            recorder.play({
              allowedsequences: ['stop'],
            }),
        ],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    let eventsCount = 0
    controller.on('recorder:record', () => {
      eventsCount++
    })
    controller.on('recorder:stop', () => {
      eventsCount++
    })
    controller.on('recorder:play', () => {
      eventsCount++
    })
    controller.getSequence('record')()
    controller.getSequence('update')()
    controller.getSequence('stop')()
    controller.getSequence('play')()
    timeout.tick() // flush
    timeout.tick()
    controller.getSequence('update2')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    controller.getSequence('stop')()
    assert(eventsCount, 4)
  })
  it('should add external events', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        record: [
          ({ recorder }) =>
            recorder.record({
              initialState: ['foo'],
            }),
        ],
        update: [({ store }) => store.set(state`foo`, 'bar2')],
        update2: [({ store }) => store.set(state`foo`, 'bar3')],
        stop: [({ recorder }) => recorder.stop()],
        play: [
          ({ recorder }) =>
            recorder.play({
              allowedsequences: ['stop'],
            }),
        ],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)
    let eventsCount = 0
    controller.on('test', (data) => {
      assert.equal(data, 'foo')
      eventsCount++
    })
    controller.getSequence('record')()
    controller.getSequence('update')()
    controller.emit('recorder:event', 'test', 'foo')
    controller.getSequence('stop')()
    controller.getSequence('play')()
    timeout.tick() // flush
    timeout.tick()
    timeout.tick()
    controller.getSequence('stop')()
    assert(eventsCount, 1)
  })
  it('should work with devtools', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const now = Date.now()
    const recording = {
      start: now,
      end: now + 20,
      duration: 20,
      initialState: [
        {
          path: [],
          value: JSON.stringify({ foo: 'bar2' }),
        },
      ],
      events: [
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar3']),
          timestamp: now + 10,
        },
      ],
    }
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        play: [
          ({ recorder }) => {
            recorder.loadRecording(recording)
            recorder.play({
              allowedsequences: ['stop'],
            })
          },
        ],
        stop: [({ recorder }) => recorder.stop()],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule, {
      devtools: { init() {}, send() {}, sendExecutionData() {} },
    })
    controller.getSequence('play')()
    assert.deepEqual(controller.getState(), {
      foo: 'bar2',
    })
    timeout.tick()
    assert.deepEqual(controller.getState(), {
      foo: 'bar3',
    })
    controller.getSequence('stop')()
  })
  it('should throw an error when sending play sequence while already playing or recording', () => {
    const timeout = timeoutMock()
    const RecorderProvider = require('./Recorder').default
    const now = Date.now()
    const recording = {
      start: now,
      end: now + 20,
      duration: 20,
      initialState: [
        {
          path: [],
          value: JSON.stringify({ foo: 'bar2' }),
        },
      ],
      events: [
        {
          type: 'mutation',
          method: 'set',
          args: JSON.stringify([['foo'], 'bar3']),
          timestamp: now + 5,
        },
      ],
    }
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        play: [
          ({ recorder }) => {
            recorder.loadRecording(recording)
            recorder.play()
            recorder.play()
          },
        ],
      },
      providers: {
        recorder: RecorderProvider({
          setTimeout: timeout,
        }),
      },
    }
    const controller = App(rootModule)

    assert.throws(() => {
      controller.getSequence('play')()
    })
  })
})
