/* eslint-env mocha */
import { Controller, Module, Provider } from '../'
import assert from 'assert'

describe('Debugger', () => {
  it('should send debuggerData', () => {
    const rootModule = Module({
      signals: {
        foo: [
          (context) => {
            context.debugger.send(1)
          },
        ],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData(debuggerData) {
          assert.equal(debuggerData, 1)
        },
      },
    })
    controller.getSignal('foo')()
  })
  it('should wrap provider', () => {
    const rootModule = Module({
      providers: {
        myProvider: Provider({ doSomething() {} }),
      },
      signals: {
        foo: [
          ({ myProvider }) => {
            myProvider.doSomething(1)
          },
        ],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData(debuggerData) {
          assert.equal(debuggerData.type, 'provider')
          assert.equal(debuggerData.method, 'myProvider.doSomething')
          assert.deepEqual(debuggerData.args, [1])
          assert.equal(debuggerData.returnValue, undefined)
          assert.ok(debuggerData.datetime)
        },
      },
    })
    controller.getSignal('foo')()
  })
  it('throw send debuggerData', () => {
    const rootModule = Module({
      signals: {
        foo: [() => {}],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData() {},
        preventPropsReplacement: true,
      },
    })
    controller.getSignal('foo')()
  })
  it('should be able to call wrapped providers directly', () => {
    let callCount = 0
    const foo = Module({
      providers: {
        providerA: Provider({ foo() {} }),
      },
    })
    const bar = Module({
      providers: {
        providerB: Provider({
          foo() {
            return this.context.providerA.foo()
          },
        }),
      },
    })
    const rootModule = Module({
      modules: {
        foo,
        bar,
      },
      signals: {
        foo: [
          ({ providerB }) => {
            providerB.foo()
          },
        ],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        sendExecutionData() {
          callCount++
        },
      },
    })
    controller.getSignal('foo')()
    assert.equal(callCount, 1)
  })
})
