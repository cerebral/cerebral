/* eslint-env mocha */
import { Controller, Module } from '../'
import assert from 'assert'

describe('Module', () => {
  it('should be able to GET state', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ module }) => assert.deepEqual(module.get(), { foo: 'bar' })],
      },
    })
    const controller = Controller(rootModule)
    controller.getSequence('foo')()
  })
  it('should be able to GET state from submodule', () => {
    const subModule = Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ module }) => assert.deepEqual(module.get(), { foo: 'bar' })],
      },
    })
    const rootModule = Module({
      modules: { subModule },
    })
    const controller = Controller(rootModule)

    controller.getSequence('subModule.foo')()
  })
  it('should be able to GET state from submodule with path', () => {
    const subModule = Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ module }) => assert.deepEqual(module.get('foo'), 'bar')],
      },
    })
    const rootModule = Module({
      modules: { subModule },
    })
    const controller = Controller(rootModule)

    controller.getSequence('subModule.foo')()
  })
  it('should be able to SET state', () => {
    const rootModule = Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ module }) => module.set('foo', 'bar2')],
      },
    })
    const controller = Controller(rootModule)
    controller.getSequence('foo')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should be able to SET state in subModule', () => {
    const subModule = Module({
      state: {
        foo: 'bar',
      },
      sequences: {
        foo: [({ module }) => module.set('foo', 'bar2')],
      },
    })
    const rootModule = Module({
      modules: { subModule },
    })
    const controller = Controller(rootModule)
    controller.getSequence('subModule.foo')()
    assert.deepEqual(controller.getState(), { subModule: { foo: 'bar2' } })
  })
  it('should work with devtools', () => {
    const rootModule = Module({
      state: {
        foo: ['foo'],
      },
      sequences: {
        foo: [({ module }) => module.splice('foo', 0, 1, 'bar')],
      },
    })
    const controller = Controller(rootModule, {
      devtools: {
        init() {},
        send() {},
        sendExecutionData(data) {
          assert.equal(data.method, 'module.splice')
        },
      },
    })
    controller.getSequence('foo')()
    assert.deepEqual(controller.getState(), { foo: ['bar'] })
  })
})
