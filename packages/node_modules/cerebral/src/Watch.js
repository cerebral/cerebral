export default class Watcher {
  constructor() {
    this.controller = null
    this.modulePath = ''
    this.subscribers = []
    this.dependencyMap = null
  }
  create(controller, modulePath) {
    this.controller = controller
    this.modulePath = modulePath

    return this
  }
  onUpdate(changes, force) {
    this.subscribers.forEach((subscription) => {
      subscription.cb(changes, force)
    })
  }
  subscribe(cb) {
    if (!this.dependencyMap) {
      this.dependencyMap = this.createDependencyMap()
      this.controller.dependencyStore.addEntity(this, this.dependencyMap)
    }

    const index = this.subscribers.length
    const unsubscribe = () => {
      this.subscribers.splice(index, 1)
    }

    this.subscribers.push({
      unsubscribe,
      cb,
    })

    return unsubscribe
  }
  destroy() {
    this.subscribers.forEach((subscription) => subscription.unsubscribe())
    this.subscribers = null
    if (this.dependencyMap) {
      this.controller.dependencyStore.removeEntity(this, this.dependencyMap)
    }
  }
}
