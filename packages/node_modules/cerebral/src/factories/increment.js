export default function(target, value = 1) {
  function increment({ store, module, props, resolve }) {
    if (!resolve.isTag(target, 'state', 'props', 'moduleState')) {
      throw new Error(
        'Cerebral factory.increment: You have to use the STATE, MODULESTATE or PROPS tag as first argument'
      )
    }

    let resolvedValue = resolve.value(value)

    if (!Number.isInteger(resolvedValue)) {
      throw new Error(
        'Cerebral factory.increment: You must increment by integer values'
      )
    }

    const invalidStateMsg =
      'Cerebral factory.increment: You must increment integer values'
    if (target.type === 'state' || target.type === 'moduleState') {
      store.increment(target, resolvedValue)
    } else {
      const result = Object.assign({}, props)
      const parts = resolve.path(target).split('.')
      const key = parts.pop()
      const targetObj = parts.reduce((target, key) => {
        return (target[key] = Object.assign({}, target[key] || {}))
      }, result)

      if (!Number.isInteger(targetObj[key])) {
        throw new Error(invalidStateMsg)
      }

      targetObj[key] += resolvedValue

      return result
    }
  }

  increment.displayName = `factory.increment(${String(target)}, ${String(
    value
  )})`

  return increment
}
