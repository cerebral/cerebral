/* eslint-env mocha */
import { props, state } from '../tags'

import App from '../'
import assert from 'assert'
import { toggle } from './'

describe('factory.toggle', () => {
  it('should toggle state', () => {
    const rootModule = {
      state: {
        foo: true,
      },
      sequences: {
        test: [toggle(state`foo`)],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), { foo: false })
  })
  it('should toggle state with props', () => {
    const rootModule = {
      state: {
        todos: {
          one: true,
          two: false,
        },
      },
      sequences: {
        test: [toggle(state`todos.${props`ref`}`)],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')({ ref: 'one' })
    assert.deepEqual(controller.getState(), {
      todos: { one: false, two: false },
    })
  })
  it('should throw on bad argument', (done) => {
    const rootModule = {
      state: {},
      sequences: {
        test: [toggle(props`foo`)],
      },
    }
    const controller = App(rootModule)

    controller.removeListener('error')
    controller.once('error', (error) => {
      assert.ok(error)
      done()
    })

    controller.getSequence('test')()
  })
})
