/* eslint-env mocha */
import { props, state, string } from '../tags'
import { push, set } from './'

import App from '../'
import assert from 'assert'

describe('factory.set', () => {
  it('should set value to model', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [set(state`foo`, 'bar2')],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should set value to props', () => {
    const rootModule = {
      sequences: {
        test: [
          set(props`foo`, 'bar'),
          ({ props }) => {
            assert.equal(props.foo, 'bar')
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
  })
  it('should set deep value to props', () => {
    const rootModule = {
      sequences: {
        test: [
          set(props`foo`, { bing: 'bor' }),
          set(props`foo.bar`, 'baz'),
          ({ props }) => {
            assert.equal(props.foo.bar, 'baz')
            assert.equal(props.foo.bing, 'bor')
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
  })
  it('should set non string value to model', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [set(state`foo`, { bar: 'baz' })],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), { foo: { bar: 'baz' } })
  })
  it('should set value to model from props', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [set(state`foo`, props`value`)],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')({
      value: 'bar2',
    })
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
  })
  it('should set value to model from model', () => {
    const rootModule = {
      state: {
        foo: 'bar',
        grabValue: 'bar2',
      },
      sequences: {
        test: [set(state`foo`, state`grabValue`)],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    assert.equal(controller.getState().foo, 'bar2')
  })
  it('should throw on bad argument', (done) => {
    const rootModule = {
      state: {},
      sequences: {
        test: [set(string`foo`, 'bar')],
      },
    }
    const controller = App(rootModule)
    controller.removeListener('error')
    controller.once('error', (error) => {
      assert.ok(error)
      done()
    })

    controller.getSequence('test')()
  })
  it('should copy plain object', () => {
    const rootModule = {
      state: {
        foo: {},
      },
      sequences: {
        test: [set(state`foo`, {}), set(state`foo.${props`key`}`, 'bar')],
      },
    }
    const controller = App(rootModule)
    controller.once('end', () => {
      assert.deepEqual(controller.getState('foo'), { key1: 'bar' })
    })
    controller.getSequence('test')({
      key: 'key1',
    })
    controller.once('end', () => {
      assert.deepEqual(controller.getState('foo'), { key2: 'bar' })
    })
    controller.getSequence('test')({
      key: 'key2',
    })
  })
  it('should copy array object', () => {
    const rootModule = {
      state: {
        foo: [],
      },
      sequences: {
        test: [set(state`foo`, []), push(state`foo`, 'bar')],
      },
    }
    const controller = App(rootModule)
    controller.once('end', () => {
      assert.deepEqual(controller.getState('foo'), ['bar'])
    })
    controller.getSequence('test')()
    controller.once('end', () => {
      assert.deepEqual(controller.getState('foo'), ['bar'])
    })
    controller.getSequence('test')()
  })
})
