import { isObject } from '../utils'

export default function(target, value) {
  function set({ store, props, resolve }) {
    if (!resolve.isTag(target, 'state', 'props', 'moduleState')) {
      throw new Error(
        'Cerebral factory.set: You have to use the STATE, PROPS or MODULESTATE tag as first argument'
      )
    }

    let resolvedValue = resolve.value(value)

    if (!resolve.isResolveValue(value) && isObject(value)) {
      resolvedValue = Object.assign({}, resolvedValue)
    } else if (!resolve.isResolveValue(value) && Array.isArray(value)) {
      resolvedValue = resolvedValue.slice()
    }

    if (target.type === 'state' || target.type === 'moduleState') {
      store.set(target, resolvedValue)
    } else {
      const result = Object.assign({}, props)
      const parts = resolve.path(target).split('.')
      const key = parts.pop()
      const targetObj = parts.reduce((target, key) => {
        return (target[key] = Object.assign({}, target[key] || {}))
      }, result)
      targetObj[key] = resolvedValue

      return result
    }
  }

  set.displayName = `factory.set(${String(target)}, ${String(value)})`

  return set
}
