/* eslint-env mocha */
import { Controller, Module } from '../'
import assert from 'assert'
import { merge } from './'
import { state, props } from '../tags'

describe('operator.merge', () => {
  it('should merge value in model', () => {
    const rootModule = Module({
      state: {
        users: {
          john: 'John Difool',
        },
      },
      sequences: {
        test: [merge(state`users`, { largo: 'Largo Winch' })],
      },
    })
    const controller = Controller(rootModule)
    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), {
      users: {
        john: 'John Difool',
        largo: 'Largo Winch',
      },
    })
  })
  it('should merge value from props in model', () => {
    const rootModule = Module({
      state: {
        users: {
          john: 'John Difool',
        },
      },
      sequences: {
        test: [merge(state`users`, props`value`)],
      },
    })
    const controller = Controller(rootModule)
    controller.getSequence('test')({ value: { largo: 'Largo Winch' } })
    assert.deepEqual(controller.getState(), {
      users: {
        john: 'John Difool',
        largo: 'Largo Winch',
      },
    })
  })
  it('should throw on bad argument', (done) => {
    const rootModule = Module({
      state: {},
      sequences: {
        test: [merge(props`users`, { joe: 'Joe' })],
      },
    })
    const controller = Controller(rootModule)

    controller.removeListener('error')
    controller.once('error', (error) => {
      assert.ok(error)
      done()
    })

    controller.getSequence('test')()
  })
  it('should create object if no value', () => {
    const rootModule = Module({
      state: {},
      sequences: {
        test: [merge(state`users`, { joe: 'Joe' })],
      },
    })
    const controller = Controller(rootModule)
    controller.getSequence('test')()
    assert.deepEqual(controller.getState(), { users: { joe: 'Joe' } })
  })
  it('should merge multiple objects', () => {
    const rootModule = Module({
      state: {},
      sequences: {
        test: [
          merge(state`users`, { joe: 'Joe' }, props`extend`, {
            bob: props`bob`,
          }),
        ],
      },
    })
    const controller = Controller(rootModule)
    controller.getSequence('test')({
      extend: {
        jack: 'Jack',
      },
      bob: 'Bob',
    })
    assert.deepEqual(controller.getState(), {
      users: {
        joe: 'Joe',
        jack: 'Jack',
        bob: 'Bob',
      },
    })
  })
})
