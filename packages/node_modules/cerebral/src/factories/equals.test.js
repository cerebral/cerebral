/* eslint-env mocha */
import { props, state } from '../tags'

import App from '../'
import assert from 'assert'
import { equals } from './'

describe('factory.equals', () => {
  it('should go down path based on props', () => {
    let count = 0
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [
          equals(props`foo`),
          {
            bar: [
              () => {
                count++
              },
            ],
            otherwise: [],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')({ foo: 'bar' })
    assert.equal(count, 1)
  })
  it('should go down path based on state', () => {
    let count = 0
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [
          equals(state`foo`),
          {
            bar: [
              () => {
                count++
              },
            ],
            otherwise: [],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    assert.equal(count, 1)
  })
  it('should throw on bad argument', (done) => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [
          equals('foo'),
          {
            bar: [() => {}],
            otherwise: [],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.removeListener('error')
    controller.once('error', (error) => {
      assert.ok(error)
      done()
    })
    controller.getSequence('test')()
  })
})
