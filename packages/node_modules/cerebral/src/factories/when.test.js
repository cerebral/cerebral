/* eslint-env mocha */
import { props, state } from '../tags'

import App from '../'
import assert from 'assert'
import { when } from './'

describe('factory.when', () => {
  it('should check truthy value of props', () => {
    let count = 0
    const rootModule = {
      sequences: {
        test: [
          when(props`foo`),
          {
            true: [
              () => {
                count++
              },
            ],
            false: [],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')({ foo: 'bar' })
    assert.equal(count, 1)
  })
  it('should check truthy value of state', () => {
    let count = 0
    const rootModule = {
      state: {
        foo: false,
      },
      sequences: {
        test: [
          when(state`foo`),
          {
            true: [],
            false: [
              () => {
                count++
              },
            ],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    assert.equal(count, 1)
  })
  it('should check truthy value of computed in state', () => {
    let count = 0
    const rootModule = {
      state: {
        foo: () => false,
      },
      sequences: {
        test: [
          when(state`foo`),
          {
            true: [],
            false: [
              () => {
                count++
              },
            ],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    assert.equal(count, 1)
  })
  it('should check truthy props using function', () => {
    let accepted = 0
    let discarded = 0
    const rootModule = {
      sequences: {
        test: [
          when(props`value`, (value) => Boolean(value.length)),
          {
            true: [
              () => {
                accepted++
              },
            ],
            false: [
              () => {
                discarded++
              },
            ],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')({ value: '' })
    controller.getSequence('test')({ value: 'foo' })
    assert.equal(accepted, 1)
    assert.equal(discarded, 1)
  })
  it('should check truthy state using function', () => {
    let discarded = 0
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [
          when(state`foo`, (value) => value === 'bar'),
          {
            true: [
              ({ store }) => {
                store.set(state`foo`, 'bar2')
              },
            ],
            false: [
              () => {
                discarded++
              },
            ],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')()
    controller.getSequence('test')()
    assert.equal(discarded, 1)
  })
  it('should check truthy state using function and multiple values', () => {
    const results = []
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        test: [
          when(state`foo`, props`bar`, (foo, bar) => foo === bar),
          {
            true: [
              () => {
                results.push('true')
              },
            ],
            false: [
              () => {
                results.push('false')
              },
            ],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')({ bar: 'bar' })
    controller.getSequence('test')({ bar: 'nope' })
    assert.deepEqual(results, ['true', 'false'])
  })
  it('should check truthy state using function and literal values', () => {
    const results = []
    const rootModule = {
      sequences: {
        test: [
          when(props`foo`, 'bar', (foo, bar) => foo === bar),
          {
            true: [
              () => {
                results.push('true')
              },
            ],
            false: [
              () => {
                results.push('false')
              },
            ],
          },
        ],
      },
    }
    const controller = App(rootModule)
    controller.getSequence('test')({ foo: 'bar' })
    controller.getSequence('test')({ foo: 'nope' })
    assert.deepEqual(results, ['true', 'false'])
  })
  it('should fail on incomplete path definition', () => {
    const rootModule = {
      sequences: {
        test: [when(props`foo`)],
      },
    }
    const controller = App(rootModule)
    assert.throws(() => {
      controller.getSequence('test')({ foo: 'bar' })
    })
  })
  it('should fail on incorrect usage', () => {
    const rootModule = {
      sequences: {
        test: [when(false), { true: [], false: [] }],
      },
    }
    const controller = App(rootModule)
    assert.throws(() => {
      controller.getSequence('test')()
    })
  })
})
