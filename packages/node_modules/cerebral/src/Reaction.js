import Watch from './Watch'
import { Computed } from './Computed'

export class Reaction extends Watch {
  constructor(dependencies, cb) {
    super('Reaction')
    this.dependencies = dependencies
    this.cb = cb
    this.getter = null
    this.context = null
    this.computedSubscriptions = []
    this.onSubscriptionUpdate = this.onSubscriptionUpdate.bind(this)
  }
  initialize() {
    this.context = this.controller.createContext()
    this.getter = (tag) => tag.getValue(this.context)
    this.computedSubscriptions = Object.keys(this.dependencies).reduce(
      (currentSubscriptions, key) => {
        if (this.dependencies[key].type === 'computed') {
          return currentSubscriptions.concat(
            this.dependencies[key]
              .getValue(this.context)
              .subscribe(this.onSubscriptionUpdate)
          )
        }

        return currentSubscriptions
      },
      []
    )
    this.subscribe(this.onSubscriptionUpdate)

    return this
  }
  onSubscriptionUpdate() {
    this.cb(
      Object.keys(this.dependencies).reduce(
        (currentDeps, key) => {
          currentDeps[key] = this.dependencies[key].getValue(this.context)

          if (currentDeps[key] instanceof Computed) {
            currentDeps[key] = currentDeps[key].getValue()
          }

          return currentDeps
        },
        {
          get: this.getter,
        }
      )
    )
  }
  createDependencyMap() {
    return this.controller.createDependencyMap(
      Object.keys(this.dependencies).map((key) => this.dependencies[key]),
      null,
      this.modulePath
    )
  }
  destroy() {
    super.destroy()
    this.computedSubscriptions.forEach((unsubscribe) => unsubscribe())
  }
}

export default (dependencies, cb) => {
  if (!cb) {
    cb = dependencies
    dependencies = {}
  }

  return new Reaction(dependencies, cb)
}
