import Watch from './Watch'
import { Computed } from './Computed'

export class Reaction extends Watch {
  constructor(dependencies, cb) {
    super('Reaction')
    this.dependencies = dependencies
    this.cb = cb
  }
  initialize() {
    const context = this.controller.createContext()
    this.getter = (tag) => tag.getValue(context)
    this.subscribe(() => {
      this.cb(
        Object.keys(this.dependencies).reduce(
          (currentDeps, key) => {
            currentDeps[key] = this.dependencies[key].getValue(context)

            if (currentDeps[key] instanceof Computed) {
              currentDeps[key] = currentDeps[key].getValue()
            }

            return currentDeps
          },
          {
            get: this.getter,
          }
        )
      )
    })
  }
  createDependencyMap() {
    return this.controller.createDependencyMap(
      Object.keys(this.dependencies).map((key) => this.dependencies[key]),
      null,
      this.modulePath
    )
  }
}

export default (dependencies, cb) => {
  if (!cb) {
    cb = dependencies
    dependencies = {}
  }

  return new Reaction(dependencies, cb)
}
