/* eslint-env mocha */
import { Controller } from '../'
import assert from 'assert'
import { filter } from './'
import { props, state, string } from '../tags'

describe('operator.filter', () => {
  it('should filter value from model', () => {
    const controller = Controller({
      state: {
        list: [12, 5, 8, 130, 44],
      },
      signals: {
        test: [
          filter(state`filteredList`, state`list`, function isBigEnough(value) {
            return value >= 10
          }),
        ],
      },
    })
    controller.getSignal('test')()
    assert.deepEqual(controller.getState(), {
      filteredList: [12, 130, 44],
      list: [12, 5, 8, 130, 44],
    })
  })
  it('should filter value from model and set it to props', done => {
    const controller = Controller({
      state: {
        list: [12, 5, 8, 130, 44],
      },
      signals: {
        test: [
          filter(props`filteredList`, state`list`, function isBigEnough(value) {
            return value >= 10
          }),
          ({ props }) => {
            assert.deepEqual(props, {
              filteredList: [12, 130, 44],
            })
            done()
          },
        ],
      },
    })
    controller.getSignal('test')()
  })
  it('should throw on bad argument', done => {
    const controller = Controller({
      state: {},
      signals: {
        test: [filter(string`list`)],
      },
    })

    controller.removeListener('error')
    controller.once('error', error => {
      assert.ok(error)
      done()
    })

    controller.getSignal('test')()
  })
})
