export default function createArrayOperator(
  operatorName,
  useFuncReturnValue,
  target,
  ...args
) {
  function operator({ resolve, state }) {
    if (!resolve.isTag(target, 'state', 'props')) {
      throw new Error(
        `Cerebral operator.${operatorName}: You have to use the STATE or PROPS TAG as first argument`
      )
    }
    const targetPath = resolve.path(target)
    const operatorArgs = args.map(arg => resolve.value(arg))

    if (target.type === 'state' && state[operatorName]) {
      state[operatorName](targetPath, ...operatorArgs)
    } else {
      let arrayValue = operatorArgs.shift() || resolve.value(target)
      if (!Array.isArray(arrayValue)) {
        // TODO: add api website link to error and test it
        throw new Error(
          `Cerebral operator.${operatorName}: You have to use array value as second argument`
        )
      }
      arrayValue = arrayValue.reduce((acc, value) => {
        acc.push(value)
        return acc
      }, [])
      const funcValue = arrayValue[operatorName](...operatorArgs)
      if (target.type === 'state') {
        state.set(targetPath, useFuncReturnValue ? funcValue : arrayValue)
      } else {
        return { [targetPath]: useFuncReturnValue ? funcValue : arrayValue }
      }
    }
  }

  operator.displayName = `operator.${operatorName}(${String(target)}, ${args
    .map(arg => {
      if (typeof arg === 'function') {
        return arg.name || 'NoName'
      } else if (Array.isArray(arg)) {
        return JSON.stringify(arg)
      }
      return String(arg)
    })
    .join(', ')})`
  return operator
}
