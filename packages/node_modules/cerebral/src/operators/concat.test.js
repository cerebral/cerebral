/* eslint-env mocha */
import { Controller, Module } from '../'
import assert from 'assert'
import { concat } from './'
import { props, state } from '../tags'

describe('operator.concat', () => {
  it('should concat literal array in model', () => {
    const rootModule = Module({
      state: {
        list: ['one'],
      },
      signals: {
        test: [concat(state`list`, ['two'])],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('test')()
    assert.deepEqual(controller.getState(), { list: ['one', 'two'] })
  })
  it('should concat state array in model', () => {
    const rootModule = Module({
      state: {
        list: ['one'],
        list2: ['two', 'three'],
      },
      signals: {
        test: [concat(state`list`, state`list2`)],
      },
    })
    const controller = Controller(rootModule)
    controller.getSignal('test')()
    assert.deepEqual(controller.getState(), {
      list: ['one', 'two', 'three'],
      list2: ['two', 'three'],
    })
  })
  it('should throw on bad argument', (done) => {
    const rootModule = Module({
      state: {
        list: ['one'],
      },
      signals: {
        test: [concat(props`list`, ['two'])],
      },
    })
    const controller = Controller(rootModule)

    controller.removeListener('error')
    controller.once('error', (error) => {
      assert.ok(error)
      done()
    })

    controller.getSignal('test')()
  })
})
