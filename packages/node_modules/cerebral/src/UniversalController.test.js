/* eslint-env mocha */
import UniversalController from './UniversalController'
import assert from 'assert'

describe('UniversalController', () => {
  it('should track state changes', () => {
    const controller = new UniversalController({
      state: {
        foo: 'bar',
      },
    })
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar2')
      },
    ])
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
  it('should expose method to produce script with state changes', () => {
    const controller = new UniversalController({
      state: {
        foo: 'bar',
      },
    })
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar2')
      },
    ])
    assert.equal(
      controller.getScript(),
      '<script>window.CEREBRAL_STATE = {"foo":"bar2"}</script>'
    )
  })
  it('sets its hasRun flag to true in getScript()', () => {
    const controller = new UniversalController({})
    controller.run([function dummy() {}])
    assert.equal(controller.hasRun, false)
    controller.getScript()
    assert.equal(controller.hasRun, true)
  })
  it('should run an action sequence', () => {
    const controller = new UniversalController({
      state: {
        foo: 'bar',
      },
    })
    controller.runSequence(
      [
        function stateUpdate({ state, props }) {
          state.set('foo', `bar${props.value}`)
          return { value: props.value + 1 }
        },
        function stateUpdate({ state, props }) {
          state.set('foo', `bar${props.value}`)
        },
      ],
      { value: 1 }
    )
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
  it('should run a module signal', () => {
    const controller = new UniversalController({
      modules: {
        app: {
          state: {
            foo: 'bar',
          },
          signals: {
            moduleSignal: [
              function stateUpdate({ state, props }) {
                state.set('app.foo', `bar${props.value}`)
                return { value: props.value + 1 }
              },
              function stateUpdate({ state, props }) {
                state.set('app.foo', `bar${props.value}`)
              },
            ],
          },
        },
      },
    })
    controller.runSequence('app.moduleSignal', { value: 1 })
    assert.deepEqual(controller.getState(), { app: { foo: 'bar2' } })
    assert.deepEqual(controller.changes, [
      { path: ['app', 'foo'], forceChildPathUpdates: true },
      { path: ['app', 'foo'], forceChildPathUpdates: true },
    ])
  })
  it('should allow multiple runs', () => {
    const controller = new UniversalController({
      state: {
        foo: 'bar',
      },
      signals: {
        moduleSignal: [
          function stateUpdate({ state, props }) {
            state.set('foo', `bar${props.value}`)
            return { value: props.value + 1 }
          },
          function stateUpdate({ state, props }) {
            state.set('foo', `bar${props.value}`)
          },
        ],
      },
    })
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar1')
      },
    ])
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar2')
      },
    ])
    controller.runSequence(
      [
        function stateUpdate({ state, props }) {
          state.set('foo', `bar${props.value}`)
          return { value: props.value + 1 }
        },
        function stateUpdate({ state, props }) {
          state.set('foo', `bar${props.value}`)
        },
      ],
      { value: 1 }
    )
    controller.runSequence('moduleSignal', { value: 3 })
    assert.deepEqual(controller.getState(), { foo: 'bar4' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
  it('should update its state', () => {
    const controller = new UniversalController({
      state: {
        foo: {
          bar: 'baz',
        },
      },
    })
    const newState = { bar: 'changed' }
    controller.setState('foo', newState)
    assert.deepEqual(controller.getState(), { foo: newState })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
})
