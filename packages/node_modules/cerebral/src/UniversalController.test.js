/* eslint-env mocha */
import UniversalController from './UniversalController'
import assert from 'assert'

describe('UniversalController', () => {
  it('should track state changes', () => {
    const controller = new UniversalController({
      state: {
        foo: 'bar',
      },
    })
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar2')
      },
    ])
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
  it('should expose method to produce script with state changes', () => {
    const controller = new UniversalController({
      state: {
        foo: 'bar',
      },
    })
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar2')
      },
    ])
    assert.equal(
      controller.getScript(),
      '<script>window.CEREBRAL_STATE = {"foo":"bar2"}</script>'
    )
  })
  it('sets its hasRun flag to true in getScript()', () => {
    const controller = new UniversalController({})
    controller.run([function dummy() {}])
    assert.equal(controller.hasRun, false)
    controller.getScript()
    assert.equal(controller.hasRun, true)
  })
  it('should allow multiple runs', () => {
    const controller = new UniversalController({
      state: {
        foo: 'bar',
      },
    })
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar1')
      },
    ])
    controller.run([
      function stateUpdate({ state }) {
        state.set('foo', 'bar2')
      },
    ])
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
})
