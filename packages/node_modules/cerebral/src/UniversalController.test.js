/* eslint-env mocha */
import { UniversalApp, state } from './'

import assert from 'assert'

describe('UniversalApp', () => {
  it('should track state changes', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
    }
    const controller = UniversalApp(rootModule)
    controller.run([
      function stateUpdate({ store }) {
        store.set(state`foo`, 'bar2')
      },
    ])
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
  it('should expose method to get state changes', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
    }
    const controller = UniversalApp(rootModule)
    controller.run([
      function stateUpdate({ store }) {
        store.set(state`foo`, 'bar2')
      },
    ])
    assert.deepEqual(controller.getChanges(), { foo: 'bar2' })
  })
  it('should expose method to produce script with state changes', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
    }
    const controller = UniversalApp(rootModule)
    controller.run([
      function stateUpdate({ store }) {
        store.set(state`foo`, 'bar2')
      },
    ])
    assert.equal(
      controller.getScript(),
      '<script>window.CEREBRAL_STATE = {"foo":"bar2"}</script>'
    )
  })
  it('sets its hasRun flag to true in getScript()', () => {
    const rootModule = {}
    const controller = UniversalApp(rootModule)
    controller.run([function dummy() {}])
    assert.equal(controller.hasRun, false)
    controller.getScript()
    assert.equal(controller.hasRun, true)
  })
  it('should run an action sequence', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
    }
    const controller = UniversalApp(rootModule)
    controller.runSequence(
      [
        function stateUpdate({ store, props }) {
          store.set(state`foo`, `bar${props.value}`)
          return { value: props.value + 1 }
        },
        function stateUpdate({ store, props }) {
          store.set(state`foo`, `bar${props.value}`)
        },
      ],
      { value: 1 }
    )
    assert.deepEqual(controller.getState(), { foo: 'bar2' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
  it('should run a module sequence', () => {
    const app = {
      state: {
        foo: 'bar',
      },
      sequences: {
        moduleSequence: [
          function stateUpdate({ store, props }) {
            store.set(state`app.foo`, `bar${props.value}`)
            return { value: props.value + 1 }
          },
          function stateUpdate({ store, props }) {
            store.set(state`app.foo`, `bar${props.value}`)
          },
        ],
      },
    }
    const rootModule = {
      modules: {
        app,
      },
    }
    const controller = UniversalApp(rootModule)
    controller.runSequence('app.moduleSequence', { value: 1 }).then(() => {
      assert.deepEqual(controller.getState(), { app: { foo: 'bar2' } })
      assert.deepEqual(controller.changes, [
        { path: ['app', 'foo'], forceChildPathUpdates: true },
        { path: ['app', 'foo'], forceChildPathUpdates: true },
      ])
    })
  })
  it('should allow multiple runs', () => {
    const rootModule = {
      state: {
        foo: 'bar',
      },
      sequences: {
        moduleSequence: [
          function stateUpdate({ store, props }) {
            store.set(state`foo`, `bar${props.value}`)
            return { value: props.value + 1 }
          },
          function stateUpdate({ store, props }) {
            store.set(state`foo`, `bar${props.value}`)
          },
        ],
      },
    }
    const controller = UniversalApp(rootModule)
    controller.run([
      function stateUpdate({ store }) {
        store.set(state`foo`, 'bar1')
      },
    ])
    controller.run([
      function stateUpdate({ store }) {
        store.set(state`foo`, 'bar2')
      },
    ])
    controller.runSequence(
      [
        function stateUpdate({ store, props }) {
          store.set(state`foo`, `bar${props.value}`)
          return { value: props.value + 1 }
        },
        function stateUpdate({ store, props }) {
          store.set(state`foo`, `bar${props.value}`)
        },
      ],
      { value: 1 }
    )
    controller.runSequence('moduleSequence', { value: 3 })
    assert.deepEqual(controller.getState(), { foo: 'bar4' })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
  it('should update its state', () => {
    const rootModule = {
      state: {
        foo: {
          bar: 'baz',
        },
      },
    }
    const controller = UniversalApp(rootModule)
    const newState = { bar: 'changed' }
    controller.setState('foo', newState)
    assert.deepEqual(controller.getState(), { foo: newState })
    assert.deepEqual(controller.changes, [
      { path: ['foo'], forceChildPathUpdates: true },
    ])
  })
})
