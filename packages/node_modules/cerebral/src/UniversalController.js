import Controller from './Controller'
import { ensurePath, throwError, getModule } from './utils'

class UniversalController extends Controller {
  constructor(rootModule, controllerOptions) {
    super(rootModule, controllerOptions)
    this.changes = []
    this.model.state = JSON.parse(JSON.stringify(this.model.state))
    this.trackChanges = this.trackChanges.bind(this)
    this.on('flush', this.trackChanges)
    this.hasRun = false
  }
  trackChanges(changes) {
    this.changes = this.changes.concat(changes)
  }
  getChanges() {
    return this.changes.reduce((changes, change) => {
      changes[change.path.join('.')] = this.getState(change.path)

      return changes
    }, {})
  }
  getScript() {
    const state = JSON.stringify(this.getChanges())

    this.hasRun = true
    return `<script>window.CEREBRAL_STATE = ${state}</script>`
  }
  runSequence(sequence, payload) {
    let sequenceRun

    if (Array.isArray(sequence)) {
      sequenceRun = this.run('UniversalController.run', sequence, payload)
    } else if (typeof sequence === 'string') {
      const pathArray = ensurePath(sequence)
      const sequenceKey = pathArray.pop()
      const module = getModule(pathArray, this.module)
      const sequenceDefinition = module && module.sequences[sequenceKey]

      sequenceRun = this.run(sequence, sequenceDefinition.sequence, payload)
    } else {
      throwError('Sequence must be a sequence-path or an array of action.')
    }

    return sequenceRun
  }
  setState(path, value) {
    this.model.set(ensurePath(path), value)
    this.flush(true) // Track changes.
  }
}

export default UniversalController
