import { Tag } from 'function-tree'
import { getChangedProps, throwError, getStateTreeProp, noop } from './utils'
import Watch from './Watch'

class View extends Watch {
  constructor({
    dependencies = {},
    mergeProps,
    props,
    controller,
    displayName,
    onUpdate,
  }) {
    super('View')
    if (typeof dependencies === 'function') {
      throwError(
        'You can not use a function to define dependencies. Use tags or a function on the specific property you want to dynamically create'
      )
    }

    Object.keys(dependencies).forEach((key) => {
      if (!(dependencies[key] instanceof Tag)) {
        throwError(
          `The dependency "${key}" on component "${displayName}" is not a tag, it has to be a tag`
        )
      }
    })

    this.dependencies = dependencies
    this.mergeProps = mergeProps
    this.controller = controller
    this._displayName = displayName
    this._hasWarnedBigComponent = false
    this.isUnmounted = false
    this.updateComponent = onUpdate || noop
    this.props = props
    this.propKeys = Object.keys(props || {})
    this._verifyPropsWarned = false
    this.dynamicDependencies = []
    this.dynamicComputed = []

    if (controller.devtools && controller.devtools.warnStateProps) {
      this.verifyProps(props)
    }
  }
  /*
    A method to ensure objects and arrays from state tree are not passed as props
  */
  verifyProps(props) {
    const key = getStateTreeProp(props)

    if (key && !this._verifyPropsWarned) {
      console.warn(
        `You are passing an ${
          Array.isArray(props[key]) ? 'array' : 'object'
        } to the component "${
          this._displayName
        }" on prop "${key}" which is from the Cerebral state tree. You should not do this, but rather connect it directly to this component. This will optimize the component and avoid any rerender issues.`
      )
      this._verifyPropsWarned = true
    }
  }
  /*
    Updates the dependencymap which causes new renders from state
  */
  createDependencyMap() {
    return this.controller.createDependencyMap(
      Object.keys(this.dependencies)
        .map((key) => this.dependencies[key])
        .concat(this.dynamicDependencies),
      this.props
    )
  }
  mount() {
    this.create(this.controller, [], this._displayName)
    this.subscribe((...args) => {
      if (this.isUnmounted) {
        return
      }

      this.updateComponent(...args)
    })
    this.computed = this.getComputed(this.props)
  }
  unMount() {
    Object.keys(this.computed).forEach((key) => {
      if (this.computed[key].computed.propsTags.length) {
        this.computed[key].computed.destroy()
      } else {
        this.computed[key].unsubscribe()
      }
    })

    this.isUnmounted = true
    this.destroy()
  }
  onPropsUpdate(props, nextProps) {
    if (this.controller.devtools) {
      this.verifyProps(nextProps)
    }

    const propsChanges = getChangedProps(props, nextProps)

    if (propsChanges.length) {
      this.updateFromProps(propsChanges, nextProps)

      return true
    }

    return false
  }
  /*
    Called by component when props are passed from parent and they
    have changed. In this situation both tags and depndency trackers might
    be affected. Tags are just updated and dependency trackers are matched
    on props changed
  */
  updateFromProps(propsChanges, props) {
    this.update(props)
  }
  /*
    Called by Container when the components state dependencies
    has changed. In this scenario we need to run any dependencyTrackers
    that matches the state changes. There is no need to update the tags
    as their declared state deps can not change
  */
  updateFromState(stateChanges, props, force) {
    this.update(props)
  }
  /*
    Run update, re-evaluating the tags and computed, if neccessary
  */
  update(props) {
    const previousdependencyMap = this.dependencyMap

    this.props = props
    this.dependencyMap = this.createDependencyMap()

    const prevDepsMap = Object.assign({}, previousdependencyMap)
    const nextDepsMap = Object.assign({}, this.dependencyMap)
    this.controller.dependencyStore.updateEntity(this, prevDepsMap, nextDepsMap)

    if (this.controller.devtools) {
      this.controller.devtools.updateWatchMap(this, nextDepsMap, prevDepsMap)
    }
  }
  getComputed(props) {
    const getters = this.controller.createContext(props)
    return Object.keys(this.dependencies).reduce((computed, key) => {
      if (
        this.dependencies[key] instanceof Tag &&
        this.dependencies[key].type === 'computed'
      ) {
        const computedInstance = this.dependencies[key].getValue(getters)
        const attachedComputed = computedInstance.propsTags.length
          ? computedInstance.clone()
          : computedInstance
        computed[key] = {
          computed: attachedComputed,
          unsubscribe: attachedComputed.subscribe(this.updateComponent),
        }
      }

      return computed
    }, {})
  }
  /*
    Creates a getter to track inline dependencies
  */
  createDynamicGetter(props, getters) {
    this.dynamicDependencies = []
    this.dynamicComputed.forEach((computed) => computed.destroy())
    this.dynamicComputed = []
    return (tag) => {
      if (tag.type === 'computed') {
        const computed = tag.getValue(getters).clone()
        computed.subscribe(this.updateComponent)
        this.dynamicComputed.push(computed)
        return computed.getValue(props)
      }

      this.dynamicDependencies.push(tag)

      return tag.getValue(getters)
    }
  }
  /*
    Runs whenever the component has an update and renders.
    Extracts the actual values from dependency trackers and/or tags
  */
  getProps(getters, props = {}, includeProps = true) {
    const dependenciesProps = Object.keys(this.dependencies).reduce(
      (currentProps, key) => {
        const tag = this.dependencies[key]
        if (tag.type === 'computed') {
          currentProps[key] = this.computed[key].computed.getValue(props)
        } else {
          currentProps[key] = tag.getValue(getters)
        }

        return currentProps
      },
      {}
    )

    if (
      this.controller.devtools &&
      this.controller.devtools.bigComponentsWarning &&
      !this._hasWarnedBigComponent &&
      Object.keys(this.dependencies).length >=
        this.controller.devtools.bigComponentsWarning
    ) {
      console.warn(
        `Component named ${
          this._displayName
        } has a lot of dependencies, consider refactoring or adjust this option in devtools`
      )
      this._hasWarnedBigComponent = true
    }

    if (this.mergeProps) {
      const getters = this.controller.createContext(props)
      return this.mergeProps(dependenciesProps, props, (tag) => {
        if (!(tag instanceof Tag)) {
          throwError('You are not passing a tag to the mergeProp get function')
        }
        if (tag.type === 'computed') {
          return tag.getValue(getters).getValue(props)
        }
        return tag.getValue(getters)
      })
    }

    dependenciesProps.get = this.createDynamicGetter(props, getters)

    return Object.assign({}, includeProps ? props : {}, dependenciesProps)
  }
  /*
    Should be used by view layers to render with callback reveiving
    the props based on dependencies. Also allows dynamic getter to
    evaluate what has been gotten
  */
  render(props = {}, cb = () => {}, includeProps) {
    const getters = this.controller.createContext(props)
    const viewProps = this.getProps(getters, props, includeProps)

    return cb(viewProps)
  }
}

export default View
