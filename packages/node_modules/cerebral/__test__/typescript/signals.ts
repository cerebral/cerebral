import { Chain, sequence, SignalChain } from '../..'
import * as operator from './../../operators'
import { props, state } from './../../tags'
import { simpleAction, actionArray, actionFactory } from './actions'
import { someComputed } from './computed'

export const appSignal: SignalChain = [
  actionFactory(true),
  simpleAction,
  someComputed,
  actionArray,
  operator.concat(state`some.path`, props`some.value`),
  operator.concat(state`some.path`, ['foo', 'bar']),
  operator.increment(state`some.path`, props`increment`),
  operator.increment(state`some.path`, 3),
  operator.merge(state`some.path`, props`user`),
  operator.merge(state`some.path`, { name: props`name` }),
  operator.pop(state`some.path`),
  operator.push(state`some.path`, props`post`),
  operator.set(state`some.path`, 'foo'),
  operator.set(state`some.path`, 34),
  operator.set(state`some.path`, props`bang`),
  operator.shift(state`some.path`),
  operator.splice(state`some.path`, 3),
  operator.splice(state`some.path`, 3, 2),
  operator.toggle(state`some.path`),
  operator.unset(state`some.path`),
  operator.unshift(state`some.path`),

  operator.debounce(500),
  operator.equals(state`tab`),
  { home: [], main: [], otherwise: [] },
  operator.wait(1000),
  operator.when(props`ok`),
  { true: [], false: [] },
  operator.when(props`foo`, foo => foo === 'bar'),
  { true: [], false: [] },
  operator.when(props`foo`, state`bar`, (foo, bar) => foo === bar),
  { true: [], false: [] },
  operator.when<number, number, number>(props`foo`, state`bar`, state`baz`, (foo, bar, baz) => foo === bar + baz),
  { true: [], false: [] },
  operator.when(props`foo`, state`bar`, state`baz`, (foo: number, bar: number, baz: number) => foo === bar + baz),
  { true: [], false: [] },
  operator.when<number, number>(props`foo`, 45, (foo, value) => foo === value),
  { true: [], false: [] },
]

export const errorCatched: SignalChain = [
  simpleAction
]