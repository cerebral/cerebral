import StorageProviderError from './StorageProviderError'
export { default as StorageProviderError } from './StorageProviderError'

function StorageProvider(name, options = {}) {
  let cachedProvider = null

  options.json = 'json' in options ? options.json : true
  options.prefix = options.prefix ? options.prefix + '.' : ''

  function createProvider(context) {
    const target = options.target

    if (options.sync) {
      context.controller.on('flush', changes => {
        changes.forEach(change => {
          Object.keys(options.sync).forEach(syncKey => {
            if (change.path.join('.').indexOf(options.sync[syncKey]) === 0) {
              const value = context.controller.getState(options.sync[syncKey])

              value === undefined
                ? target.removeItem(options.prefix + syncKey)
                : target.setItem(
                    options.prefix + syncKey,
                    options.json ? JSON.stringify(value) : value
                  )
            }
          })
        })
      })
    }

    return {
      get(key) {
        const value = target.getItem(options.prefix + key)

        function resolveValue(value) {
          if (options.json && value) {
            return JSON.parse(value)
          }

          return value
        }

        if (value instanceof Promise) {
          return value.then(resolveValue).catch(error => {
            throw new StorageProviderError(error)
          })
        }

        return resolveValue(value)
      },
      set(key, value) {
        const maybePromise =
          value === undefined
            ? target.removeItem(options.prefix + key)
            : target.setItem(
                options.prefix + key,
                options.json ? JSON.stringify(value) : value
              )

        if (maybePromise instanceof Promise) {
          return maybePromise.catch(error => {
            throw new StorageProviderError(error)
          })
        }
      },
      remove(key) {
        const maybePromise = target.removeItem(options.prefix + key)

        if (maybePromise instanceof Promise) {
          return maybePromise.catch(error => {
            throw new StorageProviderError(error)
          })
        }
      },
    }
  }

  return context => {
    context[name] = cachedProvider = cachedProvider || createProvider(context)

    if (context.debugger) {
      context.debugger.wrapProvider(name)
    }

    return context
  }
}

export default StorageProvider
