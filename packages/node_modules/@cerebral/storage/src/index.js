function StorageProvider(options = {}) {
  let cachedProvider = null

  options.json = 'json' in options ? options.json : true
  options.prefix = options.prefix ? options.prefix + '.' : ''

  function createProvider(context) {
    const target = options.target

    if (options.sync) {
      context.controller.on('flush', changes => {
        changes.forEach(change => {
          Object.keys(options.sync).forEach(syncKey => {
            if (change.path.join('.').indexOf(options.sync[syncKey]) === 0) {
              const value = context.controller.getState(options.sync[syncKey])

              target.setItem(
                options.prefix + syncKey,
                options.json ? JSON.stringify(value) : value
              )
            }
          })
        })
      })
    }

    return {
      isAsync: options.async,
      get(key) {
        const value = target.getItem(options.prefix + key)

        if (options.json && value) {
          if (options.async) {
            return Promise.resolve(value).then(JSON.parse)
          }
          return JSON.parse(value)
        }
        if (options.async) {
          return Promise.resolve(value)
        }
        return value
      },
      set(key, value) {
        if (options.async) {
          return Promise.resolve(
            target.setItem(
              options.prefix + key,
              options.json ? JSON.stringify(value) : value
            )
          )
        }
        target.setItem(
          options.prefix + key,
          options.json ? JSON.stringify(value) : value
        )
      },
      remove(key) {
        if (options.async) {
          return Promise.resolve(target.removeItem(options.prefix + key))
        }
        target.removeItem(options.prefix + key)
      },
    }
  }

  return context => {
    context.storage = cachedProvider = cachedProvider || createProvider(context)

    if (context.debugger) {
      context.debugger.wrapProvider('storage')
    }

    return context
  }
}

export default StorageProvider
