import * as React from 'react'
/* eslint-disable-next-line no-unused-vars */
import { ResolveValue, IResolve } from 'function-tree'

interface PropsMap {
  [prop: string]: ResolveValue
}

export const StateContainer: React.ComponentClass<{
  state: any
  signals: any
  children?: React.ReactNode
}>

export const Container: React.ComponentClass<{
  controller: any
  children?: React.ReactNode
}>

type Get = <T>(typePath: T) => T

export function connect<ExternalProps>(
  component:
    | React.ComponentClass<ExternalProps & { get: Get }>
    | React.SFC<ExternalProps & { get: Get }>
): React.ComponentClass<ExternalProps>

export function connect<ExternalProps, Deps>(
  depsMap: Deps,
  component:
    | React.ComponentClass<ExternalProps & Deps>
    | React.SFC<ExternalProps & Deps>
): React.ComponentClass<ExternalProps>

export function connect<ExternalProps, Deps, MergeProps>(
  depsMap: Deps,
  merge: (props: ExternalProps, deps: Deps, get: Get) => MergeProps,
  component: React.ComponentClass<MergeProps> | React.SFC<MergeProps>
): React.ComponentClass<ExternalProps>

declare type ComponentDecorator = <
  TComponent extends React.ComponentClass<any>
>(
  target: TComponent
) => TComponent | void

export function decorator(propsMap: PropsMap): ComponentDecorator
