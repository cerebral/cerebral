import * as React from 'react'
/* eslint-disable-next-line no-unused-vars */
import { ResolveValue, IResolve } from 'function-tree'

interface PropsMap {
  [prop: string]: ResolveValue
}

export const StateContainer: React.ComponentClass<{
  state: any
  signals: any
  children?: React.ReactNode
}>
export const Container: React.ComponentClass<{
  controller: any
  children?: React.ReactNode
}>

export function connect<P>(
  propsMap: P
): <EP>(
  component: React.ComponentClass<P & EP> | React.SFC<P & EP>
) => React.ComponentClass<EP>

export function connectAndMerge<P>(
  propsMap: P
): <EP, MP>(
  cb: (deps: P, props: EP, get: <T>(tag: T) => T) => MP
) => (
  component: React.ComponentClass<MP> | React.SFC<MP>
) => React.ComponentClass<EP>

declare type ComponentDecorator = <
  TComponent extends React.ComponentClass<any>
>(
  target: TComponent
) => TComponent | void

export function decorator(propsMap: PropsMap): ComponentDecorator
