import * as React from 'react'
import { ContextualValue, Resolve } from 'function-tree'

interface PropsMap {
  [prop: string]: ContextualValue
}

export const StateContainer: React.ComponentClass<{state: any, signals: any, children?: React.ReactNode}>
export const Container: React.ComponentClass<{controller: any, children?: React.ReactNode}>

export function connect<P, EP = {}>(
  propsMap: PropsMap,
  component: React.ComponentClass<P & EP> | React.SFC<P & EP>
): React.ComponentClass<EP>
export function connect<P, EP = {}>(
  propsMap: PropsMap,
  overrideProps: (dependencyProps: any, ownProps: EP, resolve: Resolve) => Partial<P & EP>,
  component: React.ComponentClass<P & EP> | React.SFC<P & EP>
): React.ComponentClass<EP>

export function connect(propsMap: PropsMap, component: React.ComponentClass<any> | React.SFC<any>): React.ComponentClass<any>
export function connect(
  propsMap: PropsMap,
  overrideProps: (dependencyProps: any, ownProps: any, resolve: Resolve) => any,
  component: React.ComponentClass<any> | React.SFC<any>
): React.ComponentClass<any>


declare type ComponentDecorator = <TComponent extends React.ComponentClass<any>>(target: TComponent) => TComponent | void;

export function decorator(propsMap: PropsMap): ComponentDecorator
export function decorator(
  propsMap: PropsMap,
  overrideProps: (dependencyProps: any, ownProps: any, resolve: Resolve) => any
): ComponentDecorator
