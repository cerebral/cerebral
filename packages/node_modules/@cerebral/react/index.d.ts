import * as React from 'react'
/* eslint-disable-next-line no-unused-vars */
import { ResolveValue, IResolve } from 'function-tree'

interface PropsMap {
  [prop: string]: ResolveValue
}

export const StateContainer: React.ComponentClass<{
  state: any
  signals: any
  children?: React.ReactNode
}>
export const Container: React.ComponentClass<{
  controller: any
  children?: React.ReactNode
}>

export function connect<P, EP = {}>(
  propsMap: P
): (
  component: React.ComponentClass<P & EP> | React.SFC<P & EP>
) => React.ComponentClass<EP>
/*
export function connect<P, EP = {}>(
  propsMap: PropsMap,
  overrideProps: (
    dependencyProps: any,
    ownProps: EP,
    resolve: IResolve
  ) => Partial<P & EP>,
  component: React.ComponentClass<P & EP> | React.SFC<P & EP>
): React.ComponentClass<EP>

export function connect(
  propsMap: PropsMap,
  component: React.ComponentClass<any> | React.SFC<any>
): React.ComponentClass<any>
export function connect(
  propsMap: PropsMap,
  overrideProps: (
    dependencyProps: any,
    ownProps: any,
    resolve: IResolve
  ) => any,
  component: React.ComponentClass<any> | React.SFC<any>
): React.ComponentClass<any>

declare type ComponentDecorator = <
  TComponent extends React.ComponentClass<any>
>(
  target: TComponent
) => TComponent | void

export function decorator(propsMap: PropsMap): ComponentDecorator
export function decorator(
  propsMap: PropsMap,
  overrideProps: (dependencyProps: any, ownProps: any, resolve: IResolve) => any
): ComponentDecorator
*/
