import { View } from 'cerebral'

export function connect(dependencies) {
  return function(target) {
    let targetNgOnInit = target.prototype.ngOnInit

    target.prototype.ngOnInit = function() {
      this.props = Object.assign({}, this)
      this.onUpdate = (stateChanges, force) => {
        this.view.updateFromState(stateChanges, this.props, force)
        Object.assign(this, this.view.getProps(this.props, false))
        this._cdr.detectChanges()
      }

      this.view = new View({
        dependencies,
        props: this.props,
        controller: this._controller,
        displayName: this.constructor.name,
        onUpdate: this.onUpdate,
      })

      this.ngOnChanges = changesObj => {
        const { oldProps, nextProps } = Object.keys(changesObj).reduce(
          (updates, key) => {
            updates.oldProps[key] = changesObj[key].previousValue
            updates.nextProps[key] = changesObj[key].currentValue

            return updates
          },
          { oldProps: {}, nextProps: {} }
        )
        const hasUpdate = this.view.onPropsUpdate(oldProps, nextProps)

        if (hasUpdate) {
          Object.assign(this.ctrl, this.view.getProps(nextProps, false))
          this._cdr.detectChanges()
        }
      }

      this.view.mount()
      if (targetNgOnInit) {
        targetNgOnInit.apply(target)
      }
    }

    let targetNgAfterViewInit = target.prototype.ngAfterViewInit

    target.prototype.ngAfterViewInit = function() {
      if (targetNgAfterViewInit) {
        targetNgAfterViewInit.apply(target)
      }

      Object.assign(this, this.view.getProps(this.props, false))
      this._cdr.detectChanges()
    }

    let targetNgOnDestroy = target.prototype.ngOnDestroy

    target.prototype.ngOnDestroy = function() {
      if (targetNgOnDestroy) {
        targetNgOnDestroy.apply(target)
      }
      this.view.unMount()
    }

    return target
  }
}
