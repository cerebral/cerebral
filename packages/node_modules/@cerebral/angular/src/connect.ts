import { View } from 'cerebral'

const assign = (a: any, b: any) => {
  return Object.keys(b).reduce((current, key) => {
    current[key] = b[key]

    return current
  }, a)
}

export function connect(dependencies: any) {
  return function(target: any) {
    let targetNgOnInit = target.prototype.ngOnInit

    target.prototype.ngOnInit = function() {
      this.props = assign({}, this)
      this.onUpdate = (stateChanges: any, force: any) => {
        this.view.updateFromState(stateChanges, this.props, force)
        assign(this, this.view.getProps(this.props, false))
        this._cdr.detectChanges()
      }

      this.view = new View({
        dependencies,
        props: this.props,
        controller: this._controller,
        displayName: this.constructor.name,
        onUpdate: this.onUpdate,
      })

      this.ngOnChanges = (changesObj: any) => {
        const { oldProps, nextProps } = Object.keys(changesObj).reduce(
          (updates: any, key: any) => {
            updates.oldProps[key] = changesObj[key].previousValue
            updates.nextProps[key] = changesObj[key].currentValue

            return updates
          },
          { oldProps: {}, nextProps: {} }
        )
        const hasUpdate = this.view.onPropsUpdate(oldProps, nextProps)

        if (hasUpdate) {
          assign(this.ctrl, this.view.getProps(nextProps, false))
          this._cdr.detectChanges()
        }
      }

      this.view.mount()
      if (targetNgOnInit) {
        targetNgOnInit.apply(target)
      }
    }

    let targetNgAfterViewInit = target.prototype.ngAfterViewInit

    target.prototype.ngAfterViewInit = function() {
      if (targetNgAfterViewInit) {
        targetNgAfterViewInit.apply(target)
      }

      assign(this, this.view.getProps(this.props, false))
      this._cdr.detectChanges()
    }

    let targetNgOnDestroy = target.prototype.ngOnDestroy

    target.prototype.ngOnDestroy = function() {
      if (targetNgOnDestroy) {
        targetNgOnDestroy.apply(target)
      }
      this.view.unMount()
    }

    return target
  }
}
