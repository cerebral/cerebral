import { Module } from 'cerebral'
import { ChangeDetectorRef } from '@angular/core'
import { TestBed, getTestBed } from '@angular/core/testing'
import { TestComponent } from './TestComponent'
import * as assert from 'assert'
import { ControllerService } from '../src/ControllerService'
import { TestSubComponent } from './testSubComponent'
import { By } from '@angular/platform-browser'

function increase({ state }: any) {
  state.set('count', state.get('count') + 1)
}

function decrease({ state }: any) {
  state.set('count', state.get('count') - 1)
}

function increaseFreq({ state }: any) {
  const subCompObj = state.get('subCompObj')
  subCompObj.freq += 1
  state.set('subCompObj', subCompObj)
}

function changeSubCompName({ state }: any) {
  const subCompObj = state.get('subCompObj')
  subCompObj.name = 'cerebralTest'
  state.set('subCompObj', subCompObj)
}

const initialStore = Module({
  state: {
    count: 108,
    subCompObj: {
      name: 'cerebral',
      id: 123,
      freq: 1,
    },
  },
  signals: {
    increase: [increase],
    decrease: [decrease],
    increaseFreq: [increaseFreq],
    changeSubCompName: [changeSubCompName],
  },
})

describe('Angular', () => {
  describe(`Component`, () => {
    let fixture: any
    let controller: any
    let cmp: any
    let cdr: any
    let count: any
    let increaseClick: any
    let decreaseClick: any
    let increaseFreqClick: any
    let changeSubCompNameClick: any
    let subCmp: any

    before(() => {
      TestBed.configureTestingModule({
        declarations: [TestComponent, TestSubComponent],
        providers: [
          ChangeDetectorRef,
          {
            provide: ControllerService,
            useFactory: () => {
              return new ControllerService(initialStore)
            },
          },
        ],
      }).compileComponents()

      fixture = TestBed.createComponent(TestComponent)
      cmp = fixture.debugElement.componentInstance

      // Angular DI does not work as expected in test env work around below
      controller = TestBed.get(ControllerService)
      cdr = TestBed.get(ChangeDetectorRef)
      cmp._controller = controller
      cmp._cdr = cdr
      cmp.subCompObj = {
        name: 'cerebral',
        id: 123,
        freq: 1,
      }

      fixture.componentInstance.ngOnInit()
      fixture.componentInstance.ngAfterViewInit()

      count = fixture.debugElement.nativeElement.querySelector('#count')
      increaseClick = fixture.debugElement.nativeElement.querySelector(
        '#increase'
      )
      decreaseClick = fixture.debugElement.nativeElement.querySelector(
        '#decrease'
      )
      increaseFreqClick = fixture.debugElement.nativeElement.querySelector(
        '#increaseFreq'
      )
      changeSubCompNameClick = fixture.debugElement.nativeElement.querySelector(
        '#changeSubCompName'
      )
      subCmp = fixture.debugElement.query(By.directive(TestSubComponent))
      fixture.detectChanges()
    })

    after(() => {
      getTestBed().resetTestingModule()
    })

    it('should be able to expose host component state', () => {
      fixture.detectChanges()
      assert.equal(count.value, 108)
    })

    it('should be able to expose subComponent state', () => {
      fixture.detectChanges()
      assert.equal(subCmp.componentInstance.name, 'TestSubComponent')
      assert.equal(subCmp.componentInstance.subCompObj.freq, 1)
      assert.equal(subCmp.componentInstance.subCompObj.id, 123)
      assert.equal(subCmp.componentInstance.subCompObj.name, 'cerebral')
    })

    it('should be able to expose signal', () => {
      assert.equal(typeof cmp.increase === 'function', true)
      assert.equal(typeof cmp.decrease === 'function', true)
      assert.equal(typeof cmp.increaseFreq === 'function', true)
      assert.equal(typeof cmp.changeSubCompName === 'function', true)
    })

    it('should update state when signal is emitted', () => {
      increaseClick.click()
      assert.equal(controller.getState('count'), 109)
      decreaseClick.click()
      assert.equal(controller.getState('count'), 108)
      increaseFreqClick.click()
      const subComp = controller.getState('subCompObj')
      assert.equal(subComp.freq, 2)
      assert.equal(subComp.name, 'cerebral')
    })

    it('should update view when signal is emitted', () => {
      increaseClick.click()
      increaseClick.click()
      fixture.detectChanges()
      assert.equal(count.value, 110)
    })

    it('should update subComponent view when signal is emitted', () => {
      increaseFreqClick.click()
      changeSubCompNameClick.click()
      fixture.detectChanges()
      assert.equal(subCmp.componentInstance.subCompObj.freq, 3)
      assert.equal(subCmp.componentInstance.subCompObj.name, 'cerebralTest')
    })
  })
})
