/* eslint-env mocha */

import { ChangeDetectorRef } from '@angular/core'
import { TestBed, getTestBed } from '@angular/core/testing'
import { TestComponent } from './TestComponent'
import * as assert from 'assert'
import { ControllerService } from '../src/ControllerService'

function increase({ state }: any) {
  state.set('count', state.get('count') + 1)
}

function decrease({ state }: any) {
  state.set('count', state.get('count') - 1)
}

const initialStore = {
  state: {
    count: 108,
  },
  signals: {
    increase: [increase],
    decrease: [decrease],
  },
}

describe('Angular', () => {
  describe(`Component`, () => {
    let fixture:any
    let controller:any
    let cmp:any
    let cdr:any
    let count:any
    let increaseClick:any
    let decreaseClick:any

    before(() => {
      TestBed.configureTestingModule({
        declarations: [TestComponent],
        providers: [
          ChangeDetectorRef,
          {
            provide: ControllerService,
            useFactory: () => {
              return new ControllerService(initialStore)
            },
          },
        ],
      }).compileComponents()

      fixture = TestBed.createComponent(TestComponent)

      cmp = fixture.debugElement.componentInstance

      // Angular DI does not work as expected in test env work around below
      controller = TestBed.get(ControllerService)
      cdr = TestBed.get(ChangeDetectorRef)
      cmp._controller = controller
      cmp._cdr = cdr

      fixture.componentInstance.ngOnInit()
      fixture.componentInstance.ngAfterViewInit()

      count = fixture.debugElement.nativeElement.querySelector('#count')
      increaseClick = fixture.debugElement.nativeElement.querySelector(
        '#increase'
      )
      decreaseClick = fixture.debugElement.nativeElement.querySelector(
        '#decrease'
      )
    })

    after(() => {
      getTestBed().resetTestingModule()
    })

    it('should be able to expose state', () => {
      fixture.detectChanges()
      assert.equal(count.value, 108)
    })

    it('should be able to expose signal', () => {
      assert.equal(typeof cmp.increase === 'function', true)
      assert.equal(typeof cmp.decrease === 'function', true)
    })

    it('should update state when signal is emitted', () => {
      increaseClick.click()
      assert.equal(controller.getState('count'), 109)
      decreaseClick.click()
      assert.equal(controller.getState('count'), 108)
    })

    it('should update view when signal is emitted', () => {
      increaseClick.click()
      increaseClick.click()
      fixture.detectChanges()
      assert.equal(count.value, 110)
    })
  })
})
