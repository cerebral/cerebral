import { Provider } from 'function-tree'

export enum HttpProviderErrorTypes {
  Http = 'http',
  Abort = 'abort',
  Timeout = 'timeout',
}

export class HttpProviderError extends Error {
  constructor(
    type: HttpProviderErrorTypes,
    status: number,
    headers: any,
    body: any,
    message?: string,
    isAborted?: boolean
  )
  type: HttpProviderErrorTypes
  response: {
    status: number
    headers: any
    result: any
    isAborted: boolean
  }
  toJSON(): any
}

export default function HttpProvider(
  moduleOptions: HttpModuleOptions
): HttpProvider

export interface HttpModuleOptions {
  method?: string
  baseUrl?: string
  headers?: { [id: string]: string }
  onRequest?: (xhr: XMLHttpRequest, options: HttpResponseOptions) => void
  onResponse?: (
    response: XMLHttpRequest,
    resolve: Function,
    reject: Function,
    options?: HttpResponseOptions
  ) => void
  onRequestCallback?: (xhr: XMLHttpRequest) => void
  onResponseCallback?: (response: XMLHttpRequest) => void
}

export interface HttpRequestOptions {
  query?: { [id: string]: any }
  headers?: { [id: string]: string }
}

export interface HttpResponseOptions
  extends HttpRequestOptions,
    HttpModuleOptions {
  body: string
}

export interface HttpRequestReponse<T> {
  result: T
  status: string
}

export interface HttpProvider {
  request: any
  get<T>(
    url: string,
    passedQuery?: { [id: string]: any },
    options?: HttpRequestOptions
  ): Promise<HttpRequestReponse<T>>
  post<T>(
    url: string,
    body: any,
    options?: HttpRequestOptions
  ): Promise<HttpRequestReponse<T>>
  put<T>(
    url: string,
    body: any,
    options?: HttpRequestOptions
  ): Promise<HttpRequestReponse<T>>
  patch<T>(
    url: string,
    body: any,
    options?: HttpRequestOptions
  ): Promise<HttpRequestReponse<T>>
  delete<T>(
    url: string,
    passedQuery: { [id: string]: any },
    options?: HttpRequestOptions
  ): Promise<HttpRequestReponse<T>>
  uploadFile<T>(
    url: string,
    files: FileList | File,
    options?: FileUploadOptions
  ): FileUpload<T>
  updateOptions(newOptions: HttpModuleOptions): void
  abort(regexp: string): boolean
}

export interface FileUploadProgress {
  progress: number
}

export interface FileUploadOptions {
  name?: string
  data?: { [id: string]: any }
  headers?: { [id: string]: string }
  onProgress?: (progress: FileUploadProgress) => void | string
}

export interface FileUploadResult<T> {
  result?: T
  status: string
}

export class FileUpload<TResponse> {
  constructor(options: FileUploadOptions)
  xhr: XMLHttpRequest
  isAborted: boolean
  send: (files: FileList | File[]) => Promise<FileUploadResult<TResponse>>
  abort: () => void
}
