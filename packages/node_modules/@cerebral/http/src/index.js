import HttpService from './HttpService'

export { default as HttpProviderError } from './HttpProviderError'

// TODO: move to cerebral main package as provide(serviceName, serviceObject, methodsToExpose?)
function bindMethods(service, methods = []) {
  return methods.reduce((exposed, methodName) => {
    exposed[methodName] = service[methodName].bind(service)
    return exposed
  }, {})
}

export default function HttpProviderFactory(options) {
  let cachedServices

  // this caching / wrapping pattern worth to be generalized
  function HttpProvider(context) {
    if (cachedServices) {
      context.http = cachedServices

      return context
    }

    const services = new HttpService(context.controller, options)
    context.http = bindMethods(services, [
      'request',
      'get',
      'post',
      'put',
      'patch',
      'delete',
      'updateOptions',
      'abort',
      'uploadFile',
    ])

    if (context.debugger) {
      // would be great to get and cache wrapped service right here
      context.debugger.wrapProvider('http')
    }

    cachedServices = context.http

    return context
  }
  return HttpProvider
}
