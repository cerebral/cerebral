import { unprotect, protect, types } from 'mobx-state-tree'
import {
  isSerializable,
  throwError,
  forceSerializable,
  extractModulesProp,
} from 'cerebral/lib/utils'
import StateProvider from './StateProvider'

class Model {
  constructor(controller) {
    const state = extractModulesProp('root', controller.module, 'state')
    this.StateProvider = StateProvider
    this.state = types
      .model(
        'Store',
        extractModulesProp('root', controller.module, 'model', (key, model) => {
          return types.model(key, model)
        })
      )
      .create(state)
  }
  updateIn(path, cb, forceChildPathUpdates = false) {
    if (!path.length) {
      cb(this.state, this, 'state')

      return
    }

    unprotect(this.state)
    path.reduce((currentState, key, index) => {
      if (index === path.length - 1) {
        const currentValue = 'get' in currentState
          ? currentState.get(key)
          : currentState[key]

        cb(currentValue, currentState, key)
      } else if (
        !('get' in currentState ? currentState.get(key) : currentState[key])
      ) {
        throwError(
          `The path "${path.join(
            '.'
          )}" is invalid, can not update state. Does the path "${path
            .splice(0, path.length - 1)
            .join('.')}" exist?`
        )
      }

      return 'get' in currentState ? currentState.get(key) : currentState[key]
    }, this.state)
    protect(this.state)
  }
  /*
    Checks if value is serializable, if turned on
  */
  verifyValue(value, path) {
    if (this.devtools && !isSerializable(value, this.devtools.allowedTypes)) {
      throwError(
        `You are passing a non serializable value into the state tree on path "${path.join(
          '.'
        )}"`
      )
    }
    if (this.devtools) {
      forceSerializable(value)
    }
  }
  verifyValues(values, path) {
    if (this.devtools) {
      values.forEach(value => {
        this.verifyValue(value, path)
      })
    }
  }
  get(path = []) {
    return path.reduce((currentState, key) => {
      return 'get' in currentState ? currentState.get(key) : currentState[key]
    }, this.state)
  }
  set(path, value) {
    this.verifyValue(value, path)
    this.updateIn(
      path,
      (_, parent, key) => {
        parent[key] = value
      },
      true
    )
  }
  push(path, value) {
    this.verifyValue(value, path)
    this.updateIn(path, array => {
      array.push(value)
    })
  }
  merge(path, ...values) {
    const value = Object.assign(...values)

    // If we already have an object we make it behave
    // like multiple sets, indicating a change to very key.
    // If no value it should indicate that we are setting
    // a new object
    if (this.get(path)) {
      for (let prop in value) {
        this.set(path.concat(prop), value[prop])
      }
    } else {
      this.set(path, value)
    }
  }
  pop(path) {
    this.updateIn(path, array => {
      array.pop()
    })
  }
  shift(path) {
    this.updateIn(path, array => {
      array.shift()
    })
  }
  unshift(path, value) {
    this.verifyValue(value, path)
    this.updateIn(path, array => {
      array.unshift(value)
    })
  }
  splice(path, ...args) {
    this.verifyValues(args, path)
    this.updateIn(path, array => {
      array.splice(...args)
    })
  }
  unset(path) {
    this.updateIn(
      path,
      (_, parent, key) => {
        delete parent[key]
      },
      true
    )
  }
  concat(path, value) {
    this.verifyValue(value, path)
    this.updateIn(path, (array, parent, key) => {
      parent[key] = array.concat(value)
    })
  }
}

export default Model
