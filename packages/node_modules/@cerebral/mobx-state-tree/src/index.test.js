/* eslint-env mocha */
import { Controller } from './'
import { set } from 'cerebral/operators'
import { state } from 'cerebral/tags'
import { types } from 'mobx-state-tree'
import assert from 'assert'

describe('MobxController', () => {
  it('should instantiate with initial state', () => {
    const controller = Controller({
      modules: {
        app: {
          model: {
            foo: types.string,
          },
          state: {
            foo: 'bar',
          },
        },
      },
    })

    assert.deepEqual(controller.provide().store.toJSON(), {
      app: { foo: 'bar' },
    })
  })
  it('should throw when changing state directly', () => {
    const controller = Controller({
      modules: {
        app: {
          model: {
            foo: types.string,
          },
          state: {
            foo: 'bar',
          },
        },
      },
    })

    assert.throws(() => {
      controller.provide().store.app.foo = 'bar2'
    })
  })
  it('should allow changing state through signals', () => {
    const controller = Controller({
      modules: {
        app: {
          model: {
            foo: types.string,
          },
          state: {
            foo: 'bar',
          },
          signals: {
            test: set(state`app.foo`, 'bar2'),
          },
        },
      },
    })

    controller.provide().signals.app.test()
    assert.equal(controller.provide().store.app.foo, 'bar2')
  })
  it('should provide store and signals', () => {
    const controller = Controller({
      modules: {
        app: {
          model: {
            foo: types.string,
          },
          state: {
            foo: 'bar',
          },
          signals: {
            test: set(state`app.foo`, 'bar2'),
          },
        },
      },
    })

    assert.ok(typeof controller.provide().signals.app.test === 'function')
    assert.equal(controller.provide().store.app.foo, 'bar')
  })
})
