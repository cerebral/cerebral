/* eslint-env mocha */
/* eslint-disable no-console */
import * as assert from 'assert'
// Cannot use require here or instanceof will not work.
import { flattenConfig } from './utils'

describe('flattenConfig', () => {
  it('should handle object config', () => {
    const config = {
      '/some/url': 'some.signal',
      '/other/url': 'other.signal',
    }
    assert.deepEqual(flattenConfig(config), {
      '/some/url': {
        sequence: 'some.signal',
      },
      '/other/url': {
        sequence: 'other.signal',
      },
    })
  })

  it('should handle nested object config', () => {
    const config = {
      '/': 'base.signal',
      '/foo': {
        '/': 'foo.signal',
        '/baz': {
          '/': 'baz.signal',
        },
      },
    }
    assert.deepEqual(flattenConfig(config), {
      '/': {
        sequence: 'base.signal',
      },
      '/foo/': {
        sequence: 'foo.signal',
      },
      '/foo/baz/': {
        sequence: 'baz.signal',
      },
    })
  })

  it('should handle array config', () => {
    const config = [
      { path: '/some/url', sequence: 'some.signal' },
      { path: '/other/url', sequence: 'other.signal' },
    ]
    assert.deepEqual(flattenConfig(config), {
      '/some/url': {
        sequence: 'some.signal',
      },
      '/other/url': {
        sequence: 'other.signal',
      },
    })
  })

  it('should handle nested array config', () => {
    const config = [
      {
        path: '/foo',
        sequence: 'foo.signal',
        routes: {
          '/bing': 'bing.signal',
          '/bar': {
            '/': 'bar.signal',
            '/baz': 'baz.signal',
          },
        },
      },
      { path: '/other/url', sequence: 'other.signal' },
    ]
    assert.deepEqual(flattenConfig(config), {
      '/foo': {
        sequence: 'foo.signal',
      },
      '/foo/bing': {
        sequence: 'bing.signal',
      },
      '/foo/bar/': {
        sequence: 'bar.signal',
      },
      '/foo/bar/baz': {
        sequence: 'baz.signal',
      },
      '/other/url': {
        sequence: 'other.signal',
      },
    })
  })
})
