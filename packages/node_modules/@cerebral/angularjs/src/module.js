import { Controller, View } from 'cerebral'

class CerebralScope {
  constructor(ctrl, scope, dependencies, controller, displayName) {
    this.ctrl = ctrl
    this.scope = scope
    this.props = {} // Holds non-changed props from $onChanges
    this.onUpdate = this.onUpdate.bind(this)
    this.ctrl.$onInit = () => {
      this.props = Object.assign({}, this.ctrl)

      this.view = new View({
        dependencies,
        mergeProps: null,
        props: this.props,
        controller,
        displayName,
        onUpdate: this.onUpdate,
      })
      this.view.mount()
      this.ctrl.$onDestroy = () => {
        this.view.unMount()
        delete this.ctrl
        delete this.scope
        delete this.props
      }
      this.ctrl.$onChanges = (changesObj) => {
        const { oldProps, nextProps } = Object.keys(changesObj).reduce(
          (updates, key) => {
            updates.oldProps[key] = changesObj[key].previousValue
            updates.nextProps[key] = changesObj[key].currentValue

            return updates
          },
          {
            oldProps: Object.assign({}, this.props),
            nextProps: Object.assign({}, this.props),
          }
        )
        this.view.onPropsUpdate(oldProps, nextProps)
        Object.assign(this.props, nextProps)
        Object.assign(this.ctrl, this.view.getProps(nextProps, false))
        this.scope.safeApply()
      }
      this.scope.safeApply = function(fn) {
        var phase = this.$root.$$phase
        if (phase === '$apply' || phase === '$digest') {
          if (fn && typeof fn === 'function') {
            fn()
          }
        } else {
          this.$apply(fn)
        }
      }
      Object.assign(this.ctrl, this.view.getProps(this.props, false))
    }
  }
  onUpdate(stateChanges, force) {
    this.view.updateFromState(stateChanges, this.props, force)
    Object.assign(this.ctrl, this.view.getProps(this.props, false))
    this.scope.safeApply()
  }
}

export default (angular) => {
  angular.module('cerebral', []).provider('cerebral', function() {
    let root = null
    let config = null

    this.configure = function(rootModule, controllerConfig) {
      root = rootModule
      config = controllerConfig
    }

    this.$get = [
      '$injector',
      function($injector) {
        if (root.moduleDescription.hasOwnProperty('services')) {
          root.moduleDescription.providers =
            root.moduleDescription.providers || {}
          for (let service of root.moduleDescription.services) {
            root.moduleDescription.providers[service] = $injector.get(service)
          }
        }

        const controller = new Controller(root, config)

        return {
          connect(ctrl, scope, dependencies, displayName) {
            return new CerebralScope(
              ctrl,
              scope,
              dependencies,
              controller,
              displayName
            )
          },
          controller,
        }
      },
    ]
  })
}
