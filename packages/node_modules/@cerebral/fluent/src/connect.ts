import * as React from 'react'
import Hoc, { Component } from './Hoc'

export default function connect<Props, State, Signals, EP>(
  dependencies: (
    connect: { props: Props; state: State; signals: Signals }
  ) => EP,
  passedComponent: Component<Props & EP>
): Component<Props> {
  return Hoc<Props & EP>(dependencies, passedComponent)
}

export type Connector<TProps, TState, TSignals> = {
  state: TState
  props: TProps
  signals: TSignals
}

export function ConnectFactory<TState, TSignals>() {
  function returned<TProps>() {
    return {
      with: function<EP>(
        connector: (connect: Connector<TProps, TState, TSignals>) => EP
      ) {
        return {
          to: function(
            passedComponent: Component<TProps & EP>
          ): Component<TProps> {
            return connect<TProps, TState, TSignals, EP>(
              connector,
              passedComponent
            )
          },
          toClass: function(
            passedComponent: (props: TProps & EP) => Component<TProps & EP>
          ): Component<TProps> {
            return connect<TProps, TState, TSignals, EP>(
              connector,
              passedComponent({} as any)
            )
          },
        }
      },
    }
  }

  return returned
}
