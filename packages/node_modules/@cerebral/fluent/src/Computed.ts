import { computed as mobxComputed } from 'mobx'

export type ComputedValue<T> = {
  get(): T
}

export class ComputedClass<T> {
  callback: (state: any, global: any) => T
  instance: ComputedValue<T>
  getState: () => any
  constructor(callback: (state: any, global: any) => T) {
    this.callback = callback
  }
  get() {
    this.instance =
      this.instance ||
      mobxComputed(() =>
        this.callback(this.getState().state, this.getState().root)
      )

    return this.instance.get()
  }
}
export function Computed<T>(
  callback: (state: any, global: any) => T
): ComputedClass<T> {
  return new ComputedClass(callback)
}
