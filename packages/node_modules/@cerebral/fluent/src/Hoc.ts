import * as React from 'react'
import { throwError } from 'cerebral/internal'
import { FluentController } from './'
import View from './View'
import * as PropTypes from 'prop-types'

export type ComponentClass<P> = React.ComponentClass<P>
export type StatelessComponent<P> = React.StatelessComponent<P>
export type Component<P> = ComponentClass<P> | StatelessComponent<P>

class BaseComponent<Props> extends React.Component<Props, {}> {
  view: View
  constructor(
    dependencies: any,
    props: any,
    controller: FluentController,
    name: string
  ) {
    super(props)
    if (!controller) {
      throwError(
        'Can not find controller, did you remember to use the Container component? Read more at: http://cerebraljs.com/docs/api/components.html#react'
      )
    }

    this.onUpdate = this.onUpdate.bind(this)
    this.view = new View({
      dependencies,
      props,
      controller,
      displayName: name,
      onUpdate: this.onUpdate,
    })
  }

  componentWillMount() {
    this.view.mount()
  }

  shouldComponentUpdate() {
    return false
  }

  componentWillReceiveProps(nextProps: any) {
    const hasUpdate = this.view.onPropsUpdate(this.props, nextProps)
    if (hasUpdate) {
      this.forceUpdate()
    }
  }

  componentWillUnmount() {
    this.view.unMount()
  }
  onUpdate() {
    this.forceUpdate()
  }
}

export default function HOC<Props>(
  dependencies: any,
  Component: Component<Props>
) {
  return class extends BaseComponent<Props> {
    static displayName = `CerebralWrapping_${Component.displayName ||
      Component.name}`

    static contextTypes = {
      controller: PropTypes.object,
    }
    constructor(props: any, context: any) {
      super(
        dependencies,
        props,
        context.controller,
        Component.displayName || Component.name
      )
    }
    toJSON() {
      return this.view._displayName
    }
    render() {
      return React.createElement(Component, this.view.getProps(this.props))
    }
  }
}
