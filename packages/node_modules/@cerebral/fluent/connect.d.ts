import { Component } from './Hoc';
export default function connect<Props, State, Signals, EP>(dependencies: (connect: {
    props: Props;
    state: State;
    signals: Signals;
}) => EP, passedComponent: Component<Props & EP>): Component<Props>;
export declare type ModuleConnector<TState, TSignals> = {
    module: {
        state: TState;
        signals: TSignals;
    };
};
export declare type Connector<TProps, TState, TSignals> = {
    state: TState;
    props: TProps;
    signals: TSignals;
};
export declare function ConnectFactory<TState, TSignals>(): <TProps>() => {
    with: <EP>(connector: (connect: Connector<TProps, TState, TSignals>) => EP) => {
        to: (passedComponent: Component<TProps & EP>) => Component<TProps>;
        toClass: (passedComponent: (props: TProps & EP) => Component<TProps & EP>) => Component<TProps>;
    };
};
export declare function ModuleConnectFactory<TState, TSignals>(): {
    To: <TModuleState, TModuleSignals>(stateLookup: (state: TState) => TModuleState, signalsLookup: (state: TSignals) => TModuleSignals) => <TProps>() => {
        with: <EP>(connector: (connect: Connector<TProps, TState, TSignals> & ModuleConnector<TModuleState, TModuleSignals>) => EP) => {
            to: (passedComponent: Component<TProps & EP>) => Component<TProps>;
            toClass: (passedComponent: (props: TProps & EP) => Component<TProps & EP>) => Component<TProps>;
        };
    };
};
