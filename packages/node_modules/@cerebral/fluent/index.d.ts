import { ObservableMap as MobxObservableMap } from 'mobx';
import { BaseControllerClass, ModuleClass, ControllerOptions } from 'cerebral';
export { ConnectFactory } from './connect';
export { pathFor } from './paths';
export { SequenceFactory, SequenceWithPropsFactory, IContext, IBranchContext } from 'function-tree/fluent';
export { ComputedValue, Computed } from './Computed';
export { default as Container } from './Container';
export declare type Dictionary<Type> = MobxObservableMap<Type>;
export declare function Dictionary<Type>(values: {
    [key: string]: Type;
}): MobxObservableMap<Type>;
export { Module, Provider, CerebralError } from 'cerebral';
export declare type TLegacyState = {
    set(path: string, value: any): void;
    get(path: string): any;
    toggle(path: string): void;
    push(path: string, value: any): void;
    merge(path: string, value: {}): void;
    pop(path: string): void;
    shift(path: string): void;
    unshift(path: string, value: any): void;
    splice(path: string, index: number, length: number): void;
    concat(path: string, value: any[]): void;
    increment(path: string, delta: number): void;
    unset(path: string): void;
};
export declare class FluentController<State = {}, Signals = {}> extends BaseControllerClass {
    state: State;
    signals: Signals;
    devtools: any;
    contextProviders: any;
    constructor(rootModule: ModuleClass, options: ControllerOptions & {
        useStrict?: boolean;
        useLegacyStateApi?: boolean;
    });
    addModule(path: string, module: ModuleClass): void;
    removeModule(path: string): void | null;
}
export declare function Controller<State = {}, Signals = {}>(rootModule: ModuleClass, options?: ControllerOptions & {
    useStrict?: boolean;
    useLegacyStateApi?: boolean;
}): FluentController<State, Signals>;
