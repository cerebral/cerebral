/// <reference types="react" />
import * as React from 'react';
import View from './View';
import * as PropTypes from 'prop-types';
export declare type ComponentClass<P> = React.ComponentClass<P>;
export declare type StatelessComponent<P> = React.StatelessComponent<P>;
export declare type Component<P> = ComponentClass<P> | StatelessComponent<P>;
export default function HOC<Props>(dependencies: any, Component: Component<Props>): {
    new (props: any, context: any): {
        toJSON(): string;
        render(): React.ReactElement<Props>;
        view: View;
        componentWillMount(): void;
        shouldComponentUpdate(): boolean;
        componentWillReceiveProps(nextProps: any): void;
        componentWillUnmount(): void;
        onUpdate(): void;
        setState<K extends never>(state: {} | ((prevState: Readonly<{}>, props: Props) => {} | Pick<{}, K> | null) | Pick<{}, K> | null, callback?: (() => void) | undefined): void;
        forceUpdate(callBack?: (() => void) | undefined): void;
        props: Readonly<{
            children?: React.ReactNode;
        }> & Readonly<Props>;
        state: Readonly<{}>;
        context: any;
        refs: {
            [key: string]: React.ReactInstance;
        };
    };
    displayName: string;
    contextTypes: {
        controller: PropTypes.Requireable<any>;
    };
};
