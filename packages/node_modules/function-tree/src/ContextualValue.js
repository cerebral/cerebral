export class ContextualValue {
  // "getValue" should receive a context to extract the value
  getValue() {
    throw new Error(
      'Extending ContextualValue requires you to add a "getValue" method'
    )
  }
}

export function convertObjectWithTemplates(obj, resolve) {
  if (resolve.isContextualValue(obj)) {
    return resolve.value(obj)
  }

  return Object.keys(obj).reduce((convertedObject, key) => {
    convertedObject[key] = resolve.value(obj[key])

    return convertedObject
  }, {})
}

export function extractValueWithPath(obj, path) {
  return path.split('.').reduce((currentValue, key, index) => {
    if (index > 0 && currentValue === undefined) {
      throw new Error(
        `A tag is extracting with path "${path}", but it is not valid.`
      )
    }

    return currentValue[key]
  }, obj)
}

class ResolveTemplatesInObject extends ContextualValue {
  constructor(cvalue) {
    super()
    this.cvalue = cvalue
  }
  getValue({ resolve }) {
    return convertObjectWithTemplates(this.cvalue, resolve)
  }
}
export const resolveTemplates = obj => new ResolveTemplatesInObject(obj)
