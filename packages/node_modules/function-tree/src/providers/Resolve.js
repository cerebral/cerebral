import Tag from '../tags/Tag'
import ContextualValue from '../ContextualValue'

function createResolver(context) {
  return {
    isTag(arg, ...types) {
      if (!(arg instanceof Tag)) {
        return false
      }

      if (types.length) {
        return types.reduce((isType, type) => {
          return isType || type === arg.type
        }, false)
      }

      return true
    },
    isCompute(arg) {
      console.warn(
        '[DEPRECATION] Do not use this anymore, use "isContextualValue" which now returns true for both Tag and Compute.'
      )
      return arg instanceof ContextualValue && !(arg instanceof Tag)
    },
    isContextualValue(arg) {
      return arg instanceof ContextualValue
    },
    value(arg, overrides = {}) {
      if (arg instanceof ContextualValue) {
        return arg.getValue(
          overrides ? Object.assign({}, context, overrides) : context
        )
      }

      return arg
    },
    path(arg) {
      if (arg instanceof Tag) {
        return arg.getPath(context)
      }

      throw new Error(
        'You are extracting a path from an argument that is not a Tag.'
      )
    },
  }
}

function ResolveProviderFactory() {
  function ResolveProvider(context) {
    context.resolve = createResolver(context)

    return context
  }

  return ResolveProvider
}

export default ResolveProviderFactory
