/* eslint-env mocha */
import assert from 'assert'
import {
  convertObjectWithTemplates,
  extractValueWithPath,
  resolveObject,
} from './ResolveValue'
import Resolve from './providers/Resolve'
import { props } from './tags'

const provider = Resolve()

describe('convertObjectWithTemplates', () => {
  it('should resolve templates in object', () => {
    const obj = { foo: props`foo` }
    const context = { props: { foo: 'bar' } }
    const resolve = provider(context).resolve
    assert.deepEqual(convertObjectWithTemplates(obj, resolve, 'test'), {
      foo: 'bar',
    })
  })
})

describe('extractValueWithPath', () => {
  it('should resolve templates in object', () => {
    const obj = { foo: { bar: 'bar', baz: { bong: 'bing' } } }
    assert.equal(extractValueWithPath(obj, 'foo.bar'), 'bar')
    assert.equal(extractValueWithPath(obj, 'foo.baz.bong'), 'bing')
  })
})

describe('resolveObject', () => {
  it('should resolve templates in object on resolve', () => {
    const obj = resolveObject({ foo: props`foo` })
    const context = { props: { foo: 'bar' } }
    const resolve = provider(context).resolve
    assert.deepEqual(resolve.value(obj), { foo: 'bar' })
  })
})
