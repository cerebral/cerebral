/* eslint-env mocha */
import { FunctionTree } from './FunctionTree';
import Provider from './Provider';
import Devtools from './devtools';
import assert from 'assert';

describe('Provider', () => {
	beforeEach(() => {
		Devtools.prototype.createSocket = function() {
			this.ws = { open() {} };
		};
	});
	it('should be able to add provider', () => {
		const ft = new FunctionTree({
			provider: new Provider({
				foo() {
					return 'bar';
				}
			})
		});
		ft.run(function test({ provider }) {
			assert.equal(provider.foo(), 'bar');
		});
	});
	it('should be able to add provider as a function', () => {
		const ft = new FunctionTree({
			provider: new Provider((context) => {
				assert.ok(context);
				return {
					foo() {
						return 'bar';
					}
				};
			})
		});
		ft.run(function test({ provider }) {
			assert.equal(provider.foo(), 'bar');
		});
	});
	it('should throw when using locked provider keys', () => {
		assert.throws(
			() =>
				new FunctionTree({
					props: new Provider({
						foo() {
							return 'bar';
						}
					})
				})
		);
	});
	it('should expose context as this.context', () => {
		const ft = new FunctionTree({
			provider: new Provider({
				foo() {
					assert.deepEqual(this.context.props, { foo: 'bar' });
					assert.ok(this.context.execution);
					assert.ok(this.context.functionDetails);
					assert.ok(this.foo);
				}
			})
		});
		ft.run(
			function test({ provider }) {
				provider.foo();
			},
			{
				foo: 'bar'
			}
		);
	});
});
