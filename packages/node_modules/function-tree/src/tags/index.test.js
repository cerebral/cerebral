/* eslint-env mocha */
import { props, string } from './'
import assert from 'assert'

describe('Tags', () => {
  it('should return value using PROPS tag', () => {
    const tag = props`foo`
    assert.equal(tag.getValue({ props: { foo: 'bar' } }), 'bar')
  })
  it('should return path using STRINGS tag', () => {
    const tag = string`foo`
    assert.equal(tag.getValue({}), 'foo')
  })
  it('should compose tags', () => {
    const tag = props`foo.${props`bar`}`
    const propsObject = { foo: { baz: 'mip' }, bar: 'baz' }
    assert.equal(tag.getValue({ props: propsObject }), 'mip')
  })
  it('should throw when invalid tag is used', () => {
    const tag = props`foo.${null}`
    assert.throws(() => {
      tag.getValue()
    })
  })
  it('should throw when invalid path is used', () => {
    const tag = props`foo.bar`
    const propsObject = {}
    assert.throws(() => {
      tag.getValue({ props: propsObject })
    })
  })
  it('should throw on undefined interpolated value', () => {
    const bar = void 0
    assert.throws(() => {
      props`foo.${bar}`
    })
    assert.throws(() => {
      props`baz.${'bar'}.${bar}`
    })
  })
  it('should NOT throw on undefined value', () => {
    const tagA = props`foo.bar`
    const tagB = props`baz`
    const propsObject = { foo: {} }
    assert.doesNotThrow(() => {
      tagA.getValue({ props: propsObject })
      tagB.getValue({ props: propsObject })
    })
  })
  it('should return path', () => {
    const tag = props`foo.bar`
    const propsObject = {}
    assert.equal(tag.getPath({ props: propsObject }), 'foo.bar')
  })
  it('should return dynamic path', () => {
    const tag = props`foo.${props`bar`}`
    const propsObject = { bar: 'baz' }
    assert.equal(tag.getPath({ props: propsObject }), 'foo.baz')
  })
  it('should return all tags', () => {
    const tag = props`foo.${props`bar`}`
    const propsObject = { foo: { baz: 'mip' }, bar: 'baz' }
    const getters = { props: propsObject }
    const tags = tag.getTags(getters)
    assert.equal(tags[0].type, 'props')
    assert.equal(tags[0].getPath(getters), 'foo.baz')
    assert.equal(tags[0].getValue(getters), 'mip')
    assert.equal(tags[1].type, 'props')
    assert.equal(tags[1].getPath(getters), 'bar')
    assert.equal(tags[1].getValue(getters), 'baz')
  })
  it('should have string representation', () => {
    const tag = props`foo.${props`bar`}`
    // eslint-disable-next-line no-template-curly-in-string
    assert.equal(tag.toString(), 'props`foo.${props`bar`}`')
  })
})
