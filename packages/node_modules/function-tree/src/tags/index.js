import Tag from './Tag'

export function convertObjectWithTemplates(obj, resolve) {
  if (resolve.isTag(obj)) {
    return resolve.value(obj)
  }

  return Object.keys(obj).reduce((convertedObject, key) => {
    convertedObject[key] = resolve.value(obj[key])

    return convertedObject
  }, {})
}

export function extractValueWithPath(obj, path) {
  return path.split('.').reduce((currentValue, key, index) => {
    if (index > 0 && currentValue === undefined) {
      throw new Error(
        `A tag is extracting with path "${path}", but it is not valid.`
      )
    }

    return currentValue[key]
  }, obj)
}

export function createTemplateTag(tag, getValue) {
  return (strings, ...values) => {
    if (values.some(value => value === undefined)) {
      throw new Error(
        'One of the values passed inside the tag interpolated to undefined. Please check.'
      )
    }
    return new Tag(tag, getValue, strings, values)
  }
}

export { default as Tag } from './Tag'

export const props = createTemplateTag('props', (path, context) => {
  return extractValueWithPath(context.props, path)
})
export const string = createTemplateTag('string', path => {
  return path
})
