import { createTemplateTag, extractValueWithPath, convertObjectWithTemplates, resolveTemplates,
  Context, ContextProvider, ContextualValue, FunctionTree } from '../..'
import { props, string } from '../../tags'

const window = { app: {} }

const ft = new FunctionTree([
  ContextProvider({
    window,
    request: {
      get: () => { }
    }
  })
])

ft.run()

interface Extras {
  foo: { foo: string }
  props: { bong: number }
}

const myTag = createTemplateTag<number>(
  'myTag',
  (path, ctx) => extractValueWithPath(ctx.props, path)
)

function someAction({ resolve, props: theProps, foo } : Context<Extras>) {
  const test1: string = resolve.value<string>(props`bong`)
  const test2: string = resolve.value(string`pok`)
  const test3: number = resolve.value(myTag`one.two`)
  const test4 = convertObjectWithTemplates({foo: string`foo`}, resolve)
  const test5: string = convertObjectWithTemplates<{foo: string}>({foo: string`foo`}, resolve).foo
  const test6: ContextualValue<{}, number> = myTag`boo.boo`
  const test7: ContextualValue<{}, string> = string`boo.boo`
  const test8: string = resolve.value(resolveTemplates<{foo: string}>({ foo: string`foo` })).foo
  const test9: string = resolve.value(resolveTemplates({ foo: string`foo` })).foo
  const test10: string = foo.foo
  const test11: number = theProps.bong
}
