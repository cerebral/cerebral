{
  "dependencies": [
    {
      "name":
        "/Users/christianalfoni/Development/cerebral/packages/demos/todomvc/package.json",
      "includedInParent": true,
      "mtime": 1522949595000
    },
    {
      "name": "/Users/christianalfoni/Development/cerebral/.babelrc",
      "includedInParent": true,
      "mtime": 1519154111000
    },
    {
      "name":
        "/Users/christianalfoni/Development/cerebral/packages/node_modules/@cerebral/react/package.json",
      "includedInParent": true,
      "mtime": 1522871063000
    },
    {
      "name":
        "/Users/christianalfoni/Development/cerebral/packages/node_modules/@cerebral/react/.babelrc",
      "includedInParent": true,
      "mtime": 1510689741000
    }
  ],
  "generated": {
    "js":
      "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction connect(HOC, dependencies, mergeProps, passedComponent) {\n  var component = passedComponent;\n  var props = mergeProps;\n\n  if (arguments.length === 3) {\n    component = props;\n    props = null;\n  }\n\n  return HOC(dependencies, props, component);\n}\n\nexports.default = function (HOC) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return connect.apply(undefined, [HOC].concat(args));\n  };\n};\n\nvar decoratorFactory = exports.decoratorFactory = function decoratorFactory(HOC) {\n  return function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return function (component) {\n      return connect.apply(undefined, [HOC].concat(args, [component]));\n    };\n  };\n};\n//# sourceMappingURL=connect.js.map",
    "map": {
      "mappings": [
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 1, "column": 0 },
          "generated": { "line": 1, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 2, "column": 0 },
          "generated": { "line": 2, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 3, "column": 0 },
          "generated": { "line": 3, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 4, "column": 0 },
          "generated": { "line": 4, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 5, "column": 0 },
          "generated": { "line": 5, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 6, "column": 0 },
          "generated": { "line": 6, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 7, "column": 0 },
          "generated": { "line": 7, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 8, "column": 0 },
          "generated": { "line": 8, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 9, "column": 0 },
          "generated": { "line": 9, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 10, "column": 0 },
          "generated": { "line": 10, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 11, "column": 0 },
          "generated": { "line": 11, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 12, "column": 0 },
          "generated": { "line": 12, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 13, "column": 0 },
          "generated": { "line": 13, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 14, "column": 0 },
          "generated": { "line": 14, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 15, "column": 0 },
          "generated": { "line": 15, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 16, "column": 0 },
          "generated": { "line": 16, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 17, "column": 0 },
          "generated": { "line": 17, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 18, "column": 0 },
          "generated": { "line": 18, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 19, "column": 0 },
          "generated": { "line": 19, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 20, "column": 0 },
          "generated": { "line": 20, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 21, "column": 0 },
          "generated": { "line": 21, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 22, "column": 0 },
          "generated": { "line": 22, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 23, "column": 0 },
          "generated": { "line": 23, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 24, "column": 0 },
          "generated": { "line": 24, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 25, "column": 0 },
          "generated": { "line": 25, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 26, "column": 0 },
          "generated": { "line": 26, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 27, "column": 0 },
          "generated": { "line": 27, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 28, "column": 0 },
          "generated": { "line": 28, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 29, "column": 0 },
          "generated": { "line": 29, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 30, "column": 0 },
          "generated": { "line": 30, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 31, "column": 0 },
          "generated": { "line": 31, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 32, "column": 0 },
          "generated": { "line": 32, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 33, "column": 0 },
          "generated": { "line": 33, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 34, "column": 0 },
          "generated": { "line": 34, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 35, "column": 0 },
          "generated": { "line": 35, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 36, "column": 0 },
          "generated": { "line": 36, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 37, "column": 0 },
          "generated": { "line": 37, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 38, "column": 0 },
          "generated": { "line": 38, "column": 0 }
        },
        {
          "source": "../../node_modules/@cerebral/react/lib/connect.js",
          "original": { "line": 39, "column": 0 },
          "generated": { "line": 39, "column": 0 }
        }
      ],
      "sources": {
        "../../node_modules/@cerebral/react/lib/connect.js":
          "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nfunction connect(HOC, dependencies, mergeProps, passedComponent) {\n  var component = passedComponent;\n  var props = mergeProps;\n\n  if (arguments.length === 3) {\n    component = props;\n    props = null;\n  }\n\n  return HOC(dependencies, props, component);\n}\n\nexports.default = function (HOC) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return connect.apply(undefined, [HOC].concat(args));\n  };\n};\n\nvar decoratorFactory = exports.decoratorFactory = function decoratorFactory(HOC) {\n  return function () {\n    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return function (component) {\n      return connect.apply(undefined, [HOC].concat(args, [component]));\n    };\n  };\n};\n//# sourceMappingURL=connect.js.map"
      },
      "lineCount": 39
    }
  },
  "hash": "ee09cb21adf3dde66d14c20387003761",
  "cacheData": { "env": {} }
}
